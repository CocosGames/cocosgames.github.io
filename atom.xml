<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Coco&#39;s Games</title>
  
  <subtitle>❃ FUN IS WORTH IT ❃</subtitle>
  <link href="https://cocosgames.com/atom.xml" rel="self"/>
  
  <link href="https://cocosgames.com/"/>
  <updated>2023-04-02T10:18:11.476Z</updated>
  <id>https://cocosgames.com/</id>
  
  <author>
    <name>Coco&#39;s Games</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Colyseus Arena 服务下线</title>
    <link href="https://cocosgames.com/2023/04/02/Arena_down/"/>
    <id>https://cocosgames.com/2023/04/02/Arena_down/</id>
    <published>2023-04-02T10:12:16.598Z</published>
    <updated>2023-04-02T10:18:11.476Z</updated>
    
    <content type="html"><![CDATA[<h3 id="悲报-Colyseus-Arena-服务下线"><a href="#悲报-Colyseus-Arena-服务下线" class="headerlink" title="悲报: Colyseus Arena 服务下线."></a>悲报: Colyseus Arena 服务下线.</h3><p>可能是受加密货币市值影响, Colyseus Arena 从2023年开始就在不断缩减业务.<br>现在 Colyseus Arena 官方终于宣布其服务整体下线. 这会让许多构建在其之上的游戏和应用受到影响.<br>虽然官方服务下线了, 但是 Colyseus 作为一个开源项目还是生机勃勃的, 至少目前来看是这样.<br>Colyseus 的作者也表示会继续维护下去.<br>我也会继续当它的社区管理员.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;悲报-Colyseus-Arena-服务下线&quot;&gt;&lt;a href=&quot;#悲报-Colyseus-Arena-服务下线&quot; class=&quot;headerlink&quot; title=&quot;悲报: Colyseus Arena 服务下线.&quot;&gt;&lt;/a&gt;悲报: Colyseus Arena</summary>
      
    
    
    
    
    <category term="blog" scheme="https://cocosgames.com/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>我的 Defold 游戏开发步骤</title>
    <link href="https://cocosgames.com/2023/03/22/Defold_Steps/"/>
    <id>https://cocosgames.com/2023/03/22/Defold_Steps/</id>
    <published>2023-03-22T11:17:16.457Z</published>
    <updated>2023-03-22T11:21:44.294Z</updated>
    
    <content type="html"><![CDATA[<ol><li>打开 Defold 新建项目</li><li>打开 VSCode 初始化项目</li><li>控制台 git lfs track raw/**</li><li>加入扩展插件</li><li>加入素材, 创建 collection</li><li>加入逻辑与控制代码并调试</li><li>github commit/push</li><li>重复 4~7</li><li>分辨率适配</li><li>成品发布</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;打开 Defold 新建项目&lt;/li&gt;
&lt;li&gt;打开 VSCode 初始化项目&lt;/li&gt;
&lt;li&gt;控制台 git lfs track raw/**&lt;/li&gt;
&lt;li&gt;加入扩展插件&lt;/li&gt;
&lt;li&gt;加入素材, 创建 collection&lt;/li&gt;
&lt;li&gt;加入逻</summary>
      
    
    
    
    
    <category term="blog" scheme="https://cocosgames.com/tags/blog/"/>
    
    <category term="game" scheme="https://cocosgames.com/tags/game/"/>
    
  </entry>
  
  <entry>
    <title>Learn Lua in 15 Minutes 中文版</title>
    <link href="https://cocosgames.com/2023/03/22/learning_lua_2/"/>
    <id>https://cocosgames.com/2023/03/22/learning_lua_2/</id>
    <published>2023-03-22T07:06:31.522Z</published>
    <updated>2023-03-22T07:12:17.234Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Learn-Lua-in-15-Minutes-by-Tyler-Neylon-中文版"><a href="#Learn-Lua-in-15-Minutes-by-Tyler-Neylon-中文版" class="headerlink" title="Learn Lua in 15 Minutes by Tyler Neylon 中文版"></a>Learn Lua in 15 Minutes by Tyler Neylon 中文版</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br></pre></td><td class="code"><pre><span class="line">-- 两横代表单行注释.</span><br><span class="line"></span><br><span class="line">--[[</span><br><span class="line">    这样是多行注释.</span><br><span class="line">--]]</span><br><span class="line"></span><br><span class="line">----------------------------------------------------</span><br><span class="line">-- 1. 变量及流程控制.</span><br><span class="line">----------------------------------------------------</span><br><span class="line"></span><br><span class="line">num &#x3D; 42  -- 数字是双精度的.</span><br><span class="line">-- 别担心，64 位双精度里有 52 位</span><br><span class="line">-- 用于存储精确 int 值；对于机器精度</span><br><span class="line">-- 小于 52 位的整数来说不是问题</span><br><span class="line"></span><br><span class="line">s &#x3D; &#39;walternate&#39;  -- 类似 Python 的字符串.</span><br><span class="line">t &#x3D; &quot;双引号也行&quot;</span><br><span class="line">u &#x3D; [[ 双中括号</span><br><span class="line">可以赋值</span><br><span class="line">多行字符串.]]</span><br><span class="line">t &#x3D; nil  -- 未定义变量 t; Lua 具有垃圾回收机制.</span><br><span class="line"></span><br><span class="line">-- 用 do&#x2F;end 这类关键字表示代码块:</span><br><span class="line">while num &lt; 50 do</span><br><span class="line">  num &#x3D; num + 1  -- 没有 ++ 或者 +&#x3D; 这样的运算符.</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">-- If 代码块:</span><br><span class="line">if num &gt; 40 then</span><br><span class="line">  print(&#39;over 40&#39;)</span><br><span class="line">elseif s ~&#x3D; &#39;walternate&#39; then  -- ~&#x3D; 表示不等于.</span><br><span class="line">  -- 等于用 &#x3D;&#x3D; 表示; 字符串也可以用来比较.</span><br><span class="line">  io.write(&#39;not over 40\n&#39;)  -- 默认控制台输出.</span><br><span class="line">else</span><br><span class="line">  -- 变量默认是全局的.</span><br><span class="line">  thisIsGlobal &#x3D; 5  -- 驼峰变量命名法.</span><br><span class="line"></span><br><span class="line">  -- 这样是局部变量:</span><br><span class="line">  local line &#x3D; io.read()  -- 控制台读取输入.</span><br><span class="line"></span><br><span class="line">  -- 字符串用 .. 连接起来:</span><br><span class="line">  print(&#39;Winter is coming, &#39; .. line)</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">-- 未定义变量返回 nil.</span><br><span class="line">-- 这样做不会报错:</span><br><span class="line">foo &#x3D; anUnknownVariable  -- 此时 foo &#x3D; nil.</span><br><span class="line"></span><br><span class="line">aBoolValue &#x3D; false</span><br><span class="line"></span><br><span class="line">-- 只有 nil 和 false 表示假; 0 和 &#39;&#39; 都是真!</span><br><span class="line">if not aBoolValue then print(&#39;twas false&#39;) end</span><br><span class="line"></span><br><span class="line">-- &#39;or&#39; 两边一个真即为真； &#39;and&#39; 两边一个假即为假.</span><br><span class="line">ans &#x3D; aBoolValue and &#39;yes&#39; or &#39;no&#39;  --&gt; 永远返回 &#39;no&#39;</span><br><span class="line"></span><br><span class="line">karlSum &#x3D; 0</span><br><span class="line">for i &#x3D; 1, 100 do  -- 循环包含两端极值.</span><br><span class="line">  karlSum &#x3D; karlSum + i</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">-- 用 &quot;100, 1, -1&quot; 即可实现倒计数:</span><br><span class="line">fredSum &#x3D; 0</span><br><span class="line">for j &#x3D; 100, 1, -1 do fredSum &#x3D; fredSum + j end</span><br><span class="line"></span><br><span class="line">-- 总之, 循环范围用 起始值, 终值[, 步进值] 表示.</span><br><span class="line"></span><br><span class="line">-- 另一种循环:</span><br><span class="line">repeat</span><br><span class="line">  print(&#39;the way of the future&#39;)</span><br><span class="line">  num &#x3D; num - 1</span><br><span class="line">until num &#x3D;&#x3D; 0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">----------------------------------------------------</span><br><span class="line">-- 2. 函数.</span><br><span class="line">----------------------------------------------------</span><br><span class="line"></span><br><span class="line">function fib(n)</span><br><span class="line">  if n &lt; 2 then return 1 end</span><br><span class="line">  return fib(n - 2) + fib(n - 1)</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">-- 支持闭包及匿名函数:</span><br><span class="line">function adder(x)</span><br><span class="line">  -- 当 adder 被调用时</span><br><span class="line">  -- 返回函数被创建, 而且记得参数 x:</span><br><span class="line">  return function (y) return x + y end</span><br><span class="line">end</span><br><span class="line">a1 &#x3D; adder(9)</span><br><span class="line">a2 &#x3D; adder(36)</span><br><span class="line">print(a1(16))  --&gt; 25</span><br><span class="line">print(a2(64))  --&gt; 100</span><br><span class="line"></span><br><span class="line">-- 返回值, 函数调用参数和赋值语句</span><br><span class="line">-- 都遵循一一对应的关系. 如果遇到长度不等的情况,</span><br><span class="line">-- 不足的用 nil 弥补;</span><br><span class="line">-- 多余的被丢弃.</span><br><span class="line"></span><br><span class="line">x, y, z &#x3D; 1, 2, 3, 4</span><br><span class="line">-- 此时 x &#x3D; 1, y &#x3D; 2, z &#x3D; 3, 然后4 被丢弃.</span><br><span class="line"></span><br><span class="line">function bar(a, b, c)</span><br><span class="line">  print(a, b, c)</span><br><span class="line">  return 4, 8, 15, 16, 23, 42</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">x, y &#x3D; bar(&#39;zaphod&#39;)  --&gt; 输出 &quot;zaphod  nil nil&quot;</span><br><span class="line">-- 此时 x &#x3D; 4, y &#x3D; 8, 然后 15..42 被丢弃.</span><br><span class="line"></span><br><span class="line">-- 函数优先级最高, 可以是 local&#x2F;global.</span><br><span class="line">-- 下面两个等价:</span><br><span class="line">function f(x) return x * x end</span><br><span class="line">f &#x3D; function (x) return x * x end</span><br><span class="line"></span><br><span class="line">-- 下面两个也等价:</span><br><span class="line">local function g(x) return math.sin(x) end</span><br><span class="line">local g; g  &#x3D; function (x) return math.sin(x) end</span><br><span class="line">-- 这里 &#39;local g&#39; 声明意味着可以用 g 引用自己.</span><br><span class="line"></span><br><span class="line">-- 顺带一提, 三角函数使用的是弧度制.</span><br><span class="line"></span><br><span class="line">-- 用一个参数调用函数可以不带小括号:</span><br><span class="line">print &#39;hello&#39;  -- 正常工作.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">----------------------------------------------------</span><br><span class="line">-- 3. 表.</span><br><span class="line">----------------------------------------------------</span><br><span class="line"></span><br><span class="line">-- Table 是 Lua 里的唯一一种数据结构;</span><br><span class="line">-- 类似于数组.</span><br><span class="line">-- 像 php 的 arrays 或是 js 的 objects,</span><br><span class="line">-- 它是由哈希索引的字典还能当列表使用.</span><br><span class="line"></span><br><span class="line">-- 当作字典 &#x2F; 映射使用举例:</span><br><span class="line"></span><br><span class="line">-- 默认使用字符串作为索引键:</span><br><span class="line">t &#x3D; &#123;key1 &#x3D; &#39;value1&#39;, key2 &#x3D; false&#125;</span><br><span class="line"></span><br><span class="line">-- 使用类似js的 . 操作符获取值:</span><br><span class="line">print(t.key1)  -- 输出 &#39;value1&#39;.</span><br><span class="line">t.newKey &#x3D; &#123;&#125;  -- 增加一个键值对.</span><br><span class="line">t.key2 &#x3D; nil   -- 从表中去掉key2.</span><br><span class="line"></span><br><span class="line">-- 中括号可以使任何 (非nil) 值作为键:</span><br><span class="line">u &#x3D; &#123;[&#39;@!#&#39;] &#x3D; &#39;qbert&#39;, [&#123;&#125;] &#x3D; 1729, [6.28] &#x3D; &#39;tau&#39;&#125;</span><br><span class="line">print(u[6.28])  -- 输出 &quot;tau&quot;</span><br><span class="line"></span><br><span class="line">-- 对于字符串和数字的键, 可以直接索引.</span><br><span class="line">-- 但是对于表的键, 索引的是它的哈希.</span><br><span class="line">a &#x3D; u[&#39;@!#&#39;]  -- 此时 a &#x3D; &#39;qbert&#39;.</span><br><span class="line">b &#x3D; u[&#123;&#125;]     -- 我们希望赋值 1729, 但是实际上赋的值是 nil:</span><br><span class="line">-- b &#x3D; nil 因为索引查找失败. 之所以失败</span><br><span class="line">-- 此时的键是一个新表</span><br><span class="line">-- 这个表的哈希与赋初值的时候并不相同.</span><br><span class="line">-- 所以用字符串和数字当作键更便捷一点.</span><br><span class="line"></span><br><span class="line">-- 表作为唯一参数的函数调用不用加小括号:</span><br><span class="line">function h(x) print(x.key1) end</span><br><span class="line">h&#123;key1 &#x3D; &#39;Sonmi~451&#39;&#125;  -- Prints &#39;Sonmi~451&#39;.</span><br><span class="line"></span><br><span class="line">for key, val in pairs(u) do  -- 表迭代.</span><br><span class="line">  print(key, val)</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">-- _G 是一个内置全局表.</span><br><span class="line">print(_G[&#39;_G&#39;] &#x3D;&#x3D; _G)  -- 输出 &#39;true&#39;.</span><br><span class="line"></span><br><span class="line">-- 以表作为列表 &#x2F; 数组:</span><br><span class="line"></span><br><span class="line">-- 列表默认以数字为键:</span><br><span class="line">v &#x3D; &#123;&#39;value1&#39;, &#39;value2&#39;, 1.21, &#39;gigawatts&#39;&#125;</span><br><span class="line">for i &#x3D; 1, #v do  -- #v 代表v列表的长度.</span><br><span class="line">  print(v[i])  -- 迭代从键 1 开始</span><br><span class="line">end</span><br><span class="line">-- 这里 &#39;列表&#39; 并不是一个专有类型. v 本质上是 table</span><br><span class="line">-- 以连续数字为键的表, 可以当作列表使用.</span><br><span class="line"></span><br><span class="line">----------------------------------------------------</span><br><span class="line">-- 3.1 元表和元函数.</span><br><span class="line">----------------------------------------------------</span><br><span class="line"></span><br><span class="line">-- table 中可以设置元表</span><br><span class="line">-- 可以用来覆写运算符. 后面还会看到</span><br><span class="line">-- 类似js的prototype功能.</span><br><span class="line"></span><br><span class="line">f1 &#x3D; &#123;a &#x3D; 1, b &#x3D; 2&#125;  -- 代表分数 a&#x2F;b.</span><br><span class="line">f2 &#x3D; &#123;a &#x3D; 2, b &#x3D; 3&#125;</span><br><span class="line"></span><br><span class="line">-- 这样写肯定报错:</span><br><span class="line">-- s &#x3D; f1 + f2</span><br><span class="line"></span><br><span class="line">metafraction &#x3D; &#123;&#125;</span><br><span class="line">function metafraction.__add(f1, f2)</span><br><span class="line">  sum &#x3D; &#123;&#125;</span><br><span class="line">  sum.b &#x3D; f1.b * f2.b</span><br><span class="line">  sum.a &#x3D; f1.a * f2.b + f2.a * f1.b</span><br><span class="line">  return sum</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">setmetatable(f1, metafraction)</span><br><span class="line">setmetatable(f2, metafraction)</span><br><span class="line"></span><br><span class="line">s &#x3D; f1 + f2  -- 这样写将会调用 f1 元表上的 __add(f1, f2) 函数</span><br><span class="line"></span><br><span class="line">-- f1, f2 不含对自己元表的引用, 这一点</span><br><span class="line">-- 不同于js的prototype, 要想取得元表必须使用</span><br><span class="line">-- getmetatable(f1) 这样的函数. 元表本身也是表</span><br><span class="line">-- 里面的键是Lua事先定义好的, 比如 __add.</span><br><span class="line"></span><br><span class="line">-- 因为s没有设置元表所以下面这么写行不通:</span><br><span class="line">-- t &#x3D; s + s</span><br><span class="line">-- 下面的类似面向对象的写法就能解决这个问题.</span><br><span class="line"></span><br><span class="line">-- 使用元表的 __index 键可以制造类似 . 属性的读取操作:</span><br><span class="line">defaultFavs &#x3D; &#123;animal &#x3D; &#39;gru&#39;, food &#x3D; &#39;donuts&#39;&#125;</span><br><span class="line">myFavs &#x3D; &#123;food &#x3D; &#39;pizza&#39;&#125;</span><br><span class="line">setmetatable(myFavs, &#123;__index &#x3D; defaultFavs&#125;)</span><br><span class="line">eatenBy &#x3D; myFavs.animal  -- 多亏元表才可以这么写!</span><br><span class="line"></span><br><span class="line">-- 表里没找到的键会在其元表的</span><br><span class="line">-- __index 表里找, 没找到的话会在 __index 表元表的 __index 表里找, 如此递归地搜索下去.</span><br><span class="line"></span><br><span class="line">-- __index 还能被赋予形如 function(tbl, key) 的函数</span><br><span class="line">-- 以便在未找到键时直接自动调用.</span><br><span class="line"></span><br><span class="line">-- 像 __index,add, .. 这些称作元函数.</span><br><span class="line">-- 下面列举了元表里所有的预定义元函数.</span><br><span class="line"></span><br><span class="line">-- __add(a, b)                     for a + b</span><br><span class="line">-- __sub(a, b)                     for a - b</span><br><span class="line">-- __mul(a, b)                     for a * b</span><br><span class="line">-- __div(a, b)                     for a &#x2F; b</span><br><span class="line">-- __mod(a, b)                     for a % b</span><br><span class="line">-- __pow(a, b)                     for a ^ b</span><br><span class="line">-- __unm(a)                        for -a</span><br><span class="line">-- __concat(a, b)                  for a .. b</span><br><span class="line">-- __len(a)                        for #a</span><br><span class="line">-- __eq(a, b)                      for a &#x3D;&#x3D; b</span><br><span class="line">-- __lt(a, b)                      for a &lt; b</span><br><span class="line">-- __le(a, b)                      for a &lt;&#x3D; b</span><br><span class="line">-- __index(a, b)  &lt;fn or a table&gt;  for a.b</span><br><span class="line">-- __newindex(a, b, c)             for a.b &#x3D; c</span><br><span class="line">-- __call(a, ...)                  for a(...)</span><br><span class="line"></span><br><span class="line">----------------------------------------------------</span><br><span class="line">-- 3.2 面向对象和继承.</span><br><span class="line">----------------------------------------------------</span><br><span class="line"></span><br><span class="line">-- Lua里没有类的概念; 只能通过</span><br><span class="line">-- 表和元表来实现类似功能.</span><br><span class="line"></span><br><span class="line">-- 代码下面有解释.</span><br><span class="line"></span><br><span class="line">Dog &#x3D; &#123;&#125;                                   -- 1.</span><br><span class="line"></span><br><span class="line">function Dog:new()                         -- 2.</span><br><span class="line">  newObj &#x3D; &#123;sound &#x3D; &#39;woof&#39;&#125;                -- 3.</span><br><span class="line">  self.__index &#x3D; self                      -- 4.</span><br><span class="line">  return setmetatable(newObj, self)        -- 5.</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">function Dog:makeSound()                   -- 6.</span><br><span class="line">  print(&#39;I say &#39; .. self.sound)</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">mrDog &#x3D; Dog:new()                          -- 7.</span><br><span class="line">mrDog:makeSound()  -- &#39;I say woof&#39;         -- 8.</span><br><span class="line"></span><br><span class="line">-- 1. Dog 作为一个类; 实际上是个表.</span><br><span class="line">-- 2. 函数 tablename:fn(...) 等价于</span><br><span class="line">--    函数 tablename.fn(self, ...)</span><br><span class="line">--    操作符 : 隐式插入了第一个参数 self.</span><br><span class="line">--    至于self的取值请参考下面的 7 和 8.</span><br><span class="line">-- 3. newObj 作为 Dog 类的实例.</span><br><span class="line">-- 4. self &#x3D; 继承的类. 通常</span><br><span class="line">--    self &#x3D; Dog, 但是继承会改变它.</span><br><span class="line">--    newObj 具有 self 上的函数因为我们把</span><br><span class="line">--    newObj 的元表和 self 的 __index 都设置为了 self.</span><br><span class="line">-- 5. 要记得 setmetatable 函数会将其第一个参数作为返回值.</span><br><span class="line">-- 6. 类似于上面的 2, 但是这次的</span><br><span class="line">--    self 不是类而是实例.</span><br><span class="line">-- 7. 等同于 Dog.new(Dog), 所以 new() 里面的 self &#x3D; Dog.</span><br><span class="line">-- 8. 等同于 mrDog.makeSound(mrDog); 这里的 self &#x3D; mrDog.</span><br><span class="line"></span><br><span class="line">----------------------------------------------------</span><br><span class="line"></span><br><span class="line">-- 继承示例:</span><br><span class="line"></span><br><span class="line">LoudDog &#x3D; Dog:new()                           -- 1.</span><br><span class="line"></span><br><span class="line">function LoudDog:makeSound()</span><br><span class="line">  s &#x3D; self.sound .. &#39; &#39;                       -- 2.</span><br><span class="line">  print(s .. s .. s)</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">seymour &#x3D; LoudDog:new()                       -- 3.</span><br><span class="line">seymour:makeSound()  -- &#39;woof woof woof&#39;      -- 4.</span><br><span class="line"></span><br><span class="line">-- 1. LoudDog 具有 Dog 的变量和函数.</span><br><span class="line">-- 2. self 因为 new() 而具有一个 &#39;sound&#39; 键, 参见 3.</span><br><span class="line">-- 3. 等同于 LoudDog.new(LoudDog), 然后查找元表得到</span><br><span class="line">--    Dog.new(LoudDog) 因为 LoudDog 自己没有 &#39;new&#39; 键,</span><br><span class="line">--    而其元表的 __index &#x3D; Dog.</span><br><span class="line">--    结果就是: seymour 的元表是 LoudDog, 然后</span><br><span class="line">--    LoudDog.__index &#x3D; LoudDog. 所以 seymour.key 就</span><br><span class="line">--    &#x3D; seymour.key, LoudDog.key, Dog.key, 这样就实现了</span><br><span class="line">--    key 的继承.</span><br><span class="line">-- 4. &#39;makeSound&#39; 键在 LoudDog 里找到; 所以</span><br><span class="line">--    等同于 LoudDog.makeSound(seymour).</span><br><span class="line"></span><br><span class="line">-- 需要的话, 子类的 new() 和其父类相似:</span><br><span class="line">function LoudDog:new()</span><br><span class="line">  newObj &#x3D; &#123;&#125;</span><br><span class="line">  -- 实例化 newObj</span><br><span class="line">  self.__index &#x3D; self</span><br><span class="line">  return setmetatable(newObj, self)</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">----------------------------------------------------</span><br><span class="line">-- 4. 模块.</span><br><span class="line">----------------------------------------------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">--[[ 我把这部分内容注释掉以便其能</span><br><span class="line">--   作为 Lua 程序正常运行.</span><br><span class="line">-- 假设我们有个文件 mod.lua, 其内容如下:</span><br><span class="line">local M &#x3D; &#123;&#125;</span><br><span class="line"></span><br><span class="line">local function sayMyName()</span><br><span class="line">  print(&#39;Hrunkner&#39;)</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">function M.sayHello()</span><br><span class="line">  print(&#39;Why hello there&#39;)</span><br><span class="line">  sayMyName()</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">return M</span><br><span class="line"></span><br><span class="line">-- 另一个文件就可以使用 mod.lua 里的函数:</span><br><span class="line">local mod &#x3D; require(&#39;mod&#39;)  -- 运行 mod.lua 文件.</span><br><span class="line"></span><br><span class="line">-- require 是加载模块的标准方法.</span><br><span class="line">-- require 这里的作用相当于:     (没明白的话可以接着往下看)</span><br><span class="line">local mod &#x3D; (function ()</span><br><span class="line">  &lt;mod.lua 的脚本内容&gt;</span><br><span class="line">end)()</span><br><span class="line">-- 就好像 mod.lua 是一个函数的函数体, 所以</span><br><span class="line">-- mod.lua 里的本地变量在外面不能访问.</span><br><span class="line"></span><br><span class="line">-- 这样可以运行因为这里的 mod &#x3D; mod.lua 里的 M:</span><br><span class="line">mod.sayHello()  -- Says hello to Hrunkner.</span><br><span class="line"></span><br><span class="line">-- 这样不能运行; 因为 sayMyName 是 mod.lua 里的本地函数:</span><br><span class="line">mod.sayMyName()  -- error</span><br><span class="line"></span><br><span class="line">-- require 的返回值会自动缓存</span><br><span class="line">-- 所以一个脚本只会执行一次, 即使它被 require 很多次.</span><br><span class="line"></span><br><span class="line">-- 假设 mod2.lua 里包含函数 &quot;print(&#39;Hi!&#39;)&quot;.</span><br><span class="line">local a &#x3D; require(&#39;mod2&#39;)  -- 输出 Hi!</span><br><span class="line">local b &#x3D; require(&#39;mod2&#39;)  -- 没有输出; a&#x3D;b.</span><br><span class="line"></span><br><span class="line">-- dofile 类似于 require 但并不缓存:</span><br><span class="line">dofile(&#39;mod2.lua&#39;)  --&gt; Hi!</span><br><span class="line">dofile(&#39;mod2.lua&#39;)  --&gt; Hi! (又执行了一次)</span><br><span class="line"></span><br><span class="line">-- loadfile 载入 lua 文件但不运行它.</span><br><span class="line">f &#x3D; loadfile(&#39;mod2.lua&#39;)  -- 手动调用 f() 才会开始执行.</span><br><span class="line"></span><br><span class="line">-- loadstring 是 loadfile 的字符串版本.</span><br><span class="line">g &#x3D; loadstring(&#39;print(343)&#39;)  -- 返回输出函数.</span><br><span class="line">g()  -- 输出 343; 之前并没有输出.</span><br><span class="line"></span><br><span class="line">--]]</span><br><span class="line"></span><br><span class="line">----------------------------------------------------</span><br><span class="line">-- 5. 参考.</span><br><span class="line">----------------------------------------------------</span><br><span class="line"></span><br><span class="line">--[[</span><br><span class="line"></span><br><span class="line">我希望用 Löve 2D 游戏引擎做游戏, 所以开始学习 Lua. 这是动机.</span><br><span class="line"></span><br><span class="line">我一开始从 BlackBulletIV 的 Lua for programmers 中学习.</span><br><span class="line">然后阅读了官方的 Programming in Lua 电子书.</span><br><span class="line">这是方法.</span><br><span class="line"></span><br><span class="line">关于 Lua 的介绍可以参考 lua-users.org.</span><br><span class="line"></span><br><span class="line">这里并没有介绍 Lua 的标准库:</span><br><span class="line"> * string 库</span><br><span class="line"> * table 库</span><br><span class="line"> * math 库</span><br><span class="line"> * io 库</span><br><span class="line"> * os 库</span><br><span class="line"></span><br><span class="line">其实本教程也是个 Lua 文件.</span><br><span class="line">可以把它保存为 learn.lua 然后输入 &quot;lua learn.lua&quot; 来执行它!</span><br><span class="line"></span><br><span class="line">这是我第一次给 tylerneylon.com 写稿. </span><br><span class="line">本教程也可以在 github gist 上找到. 类似</span><br><span class="line">这样写法的其他语言的教程, 在这里:</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;learnxinyminutes.com&#x2F;</span><br><span class="line"></span><br><span class="line">祝你愉快学 Lua!</span><br><span class="line"></span><br><span class="line">--]]</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Learn Lua in 15 Minutes 中文版</summary>
    
    
    
    
    <category term="blog" scheme="https://cocosgames.com/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>换引擎了 -- Defold!</title>
    <link href="https://cocosgames.com/2023/03/13/Defold/"/>
    <id>https://cocosgames.com/2023/03/13/Defold/</id>
    <published>2023-03-13T11:43:46.072Z</published>
    <updated>2023-03-13T12:04:50.373Z</updated>
    
    <content type="html"><![CDATA[<p>由于 Cocos Creator 的稳定性实在欠佳, 无奈之下更换游戏引擎, <a href="https://defold.com/">Defold</a> 是不二之选.</p><a id="more"></a><p><img src="https://forum.defold.com/uploads/default/original/3X/3/9/397d7884aa8851a1697ec548fb01325643938a16.png" alt="Defold"></p><p>下面是 Defold 作者称赞自己的引擎有三点好处:</p><ul><li>Focus on small size - A web export is less than 1MB gzipped. Other platforms between 2 and 3 MB.</li><li>Zero-setup policy - As a developer you only install Defold once. No additional tools are needed to create bundles for each supported platform. No Android Studio, no XCode. </li><li>Truly cross platform - Write once run everywhere is true for Defold. We focus on platform agnostic APIs where it is possible to create application bundles for all supported platforms without any changes to the code.</li></ul><p>翻译过来就是 <strong>核心超级小</strong>, <strong>集成编辑器</strong> 和 <strong>真正跨平台</strong>. 真的很吸引人啊! 但是我最看重的还是其<a href="https://twitter.com/defold/status/1622896629056524292">稳定性</a>.</p><p>The Defold Foundation can not assist with funding or publishing but we’re happy to promote new games on Twitter and other social channels, and in newsletters and on the website.</p><p>When it comes to monetization in general Defold has support for In-app purchases and subscriptions as well as many of the most popular ad networks. Defold is also compliant with most of the latest SDKs and keeps up-to-date with OS updates. This helps in getting featured by for instance Apple or Google.</p><p>Defold 目前不做游戏发行, 但是毋庸置疑的是开发者能用 Defold 实现作品变现 (<a href="https://defold.com/tags/stars/monetization/">https://defold.com/tags/stars/monetization/</a>).</p><p>虽然目前 Defold 主要作为 2D 游戏引擎, 但是官方正在协同社区力量探讨 3D 的可能性.</p><p>在下不才, 试着翻译了 Defold 的 <a href="https://defold.com/zh/manuals/introduction/">全部文档</a>, 还是官方论坛 <a href="https://forum.defold.com/c/chinese/492">中文分区</a> 版主.</p><p>欢迎加入 Defold!</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;由于 Cocos Creator 的稳定性实在欠佳, 无奈之下更换游戏引擎, &lt;a href=&quot;https://defold.com/&quot;&gt;Defold&lt;/a&gt; 是不二之选.&lt;/p&gt;</summary>
    
    
    
    
    <category term="blog" scheme="https://cocosgames.com/tags/blog/"/>
    
    <category term="game" scheme="https://cocosgames.com/tags/game/"/>
    
  </entry>
  
  <entry>
    <title>Defold + Colyseus Arena 《五子目》</title>
    <link href="https://cocosgames.com/2021/12/27/wuzimu/"/>
    <id>https://cocosgames.com/2021/12/27/wuzimu/</id>
    <published>2021-12-27T08:45:40.697Z</published>
    <updated>2023-03-13T11:49:36.177Z</updated>
    
    <content type="html"><![CDATA[<p>哈嘍大家好!</p><p>這次給大家展示的是一個由 Colyseus (Arena) + Defold 引擎製作的在綫五子棋游戲. 只需要一次編寫就可以在 Windows, Mac OS, Linux, IOS, Android, 以及各種瀏覽器上運行, 只要有屏幕的設備就可以互相連接, 是不是很酷?</p><a id="more"></a><p><img src="/assets/wuzimu/wuzimu.png" alt="wuzimu.png"><br>(基於包體原因 Github 上的項目中去掉了背景)</p><ul><li>客戶端<br>客戶端使用 Defold 引擎編寫, 這是一個高性能又跨平臺的 2D 游戲引擎.<br>Defold 使用的是 Lua 語言, 所以數組的索引是從 1 開始的, 這個需要注意一下.</li></ul><ul><li><p>服務端<br>我們的 <a href="https://docs.colyseus.io/">Colyseus 服務器</a>閃亮登場!<br>還不瞭解  Colyseus 的小夥伴們請參考<a href="https://docs.colyseus.io/colyseus/">這裏</a>.<br>看看一發 npm 脚本命令建立一個完整的服務器.<br><img src="/assets/wuzimu/colyseus.png" alt="colyseus.png"><br>如果看到控制臺輸出了這句話, 那麽恭喜, 你的服務器建立成功!</p></li><li><p><a href="https://console.colyseus.io/">Colyseus Arena</a><br>將服務器程序編譯並上傳至 <a href="https://console.colyseus.io/">Colyseus Arena 服务</a>. Arena 服務是基於使用量計費的自動擴展的 Colyseus 云, 提供免費試用, 詳情參考<a href="https://docs.colyseus.io/arena/">這裏</a>.<br><img src="/assets/wuzimu/arena.png" alt="arena.png"><br>上傳完代碼記得點擊 Deploy 按鈕, 否則不會生效哦!</p></li><li><p>開源參考<br><a href="https://github.com/CocosGames/WuZiMu">https://github.com/CocosGames/WuZiMu</a></p></li><li><p>在线试玩 (服务器已下线)<br><del><a href="https://cocosgames.github.io/WuZiMu/">https://cocosgames.github.io/WuZiMu/</a></del><br><del><a href="https://cocosgames.com/assets/host/WuZiMu/">https://cocosgames.com/assets/host/WuZiMu/</a></del></p></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;哈嘍大家好!&lt;/p&gt;
&lt;p&gt;這次給大家展示的是一個由 Colyseus (Arena) + Defold 引擎製作的在綫五子棋游戲. 只需要一次編寫就可以在 Windows, Mac OS, Linux, IOS, Android, 以及各種瀏覽器上運行, 只要有屏幕的設備就可以互相連接, 是不是很酷?&lt;/p&gt;</summary>
    
    
    
    
    <category term="blog" scheme="https://cocosgames.com/tags/blog/"/>
    
    <category term="game" scheme="https://cocosgames.com/tags/game/"/>
    
  </entry>
  
  <entry>
    <title>Cocos Creator 3 + Colyseus</title>
    <link href="https://cocosgames.com/2021/08/19/Cocos%20Creator%203%20+%20Colyseus/"/>
    <id>https://cocosgames.com/2021/08/19/Cocos%20Creator%203%20+%20Colyseus/</id>
    <published>2021-08-19T10:50:48.583Z</published>
    <updated>2023-03-13T11:16:07.942Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://cocos.com/creator">Cocos Creator</a> 是跨平台 2D/3D 游戏开发工具.</p><a id="more"></a><p>Colyseus SDK 在 Cocos Creator 的运用上与 <a href="https://docs.colyseus.io/getting-started/javascript-client/">JavaScript SDK</a> 类似. 主要区别在于如何通过 Cocos Creator 的 <a href="https://docs.colyseus.io/colyseus/getting-started/cocos-creator/#importing-from-the-extension">TypeScript 组件来引入服务</a>.</p><blockquote><p>想要具体实例?<br>看看 <a href="https://github.com/colyseus/cocos-demo-tictactoe">Tic Tac Toe 项目</a>.</p></blockquote><h4 id="1-安装扩展插件"><a href="#1-安装扩展插件" class="headerlink" title="1. 安装扩展插件"></a>1. 安装扩展插件</h4><ul><li>打开 <a href="https://store.cocos.com/app/en/detail/2937/">Cocos Store</a> (菜单: “扩展” » “商店”)</li><li>搜索 “Colyseus SDK”</li><li>下载扩展插件<h4 id="2-更新-tsconfig-json-文件"><a href="#2-更新-tsconfig-json-文件" class="headerlink" title="2. 更新 tsconfig.json 文件"></a>2. 更新 tsconfig.json 文件</h4></li></ul><p>确认 <code>&quot;compilerOptions&quot;</code> 类目下有 <code>&quot;esModuleInterop&quot;: true</code>:</p><pre><code>// .../* Add your custom configuration here. */&quot;compilerOptions&quot;: &#123;  // ...  &quot;esModuleInterop&quot;: true  // ...&#125;// ...</code></pre><h4 id="3-导入扩展插件"><a href="#3-导入扩展插件" class="headerlink" title="3. 导入扩展插件"></a>3. 导入扩展插件</h4><p>根据路径导入 Colyseus 扩展插件:</p><pre><code>import Colyseus from &#39;db://colyseus-sdk/colyseus.js&#39;;</code></pre><p>下面给出一个更详细的示例方便大家应用于自己的项目之中.</p><p>把如下内容命名为 <code>NetworkManager.ts</code> 存入项目的 <code>assets</code> 文件夹里.</p><pre><code>import &#123; _decorator, Component, Node &#125; from &#39;cc&#39;;const &#123; ccclass, property &#125; = _decorator;import Colyseus from &#39;db://colyseus-sdk/colyseus.js&#39;;@ccclass(&#39;NetworkManager&#39;)export class NetworkManager extends Component &#123;    @property hostname = &quot;localhost&quot;;    @property port = 2567;    @property useSSL = false;    client!: Colyseus.Client;    room!: Colyseus.Room;    start () &#123;        // 实例化 Colyseus 客户端        // 连接到 (ws|wss)://hostname[:port]        this.client = new Colyseus.Client(`$&#123;this.useSSL ? &quot;wss&quot; : &quot;ws&quot;&#125;://$&#123;this.hostname&#125;$&#123;([443, 80].includes(this.port) || this.useSSL) ? &quot;&quot; : `:$&#123;this.port&#125;`&#125;`);        // 连接到 room        this.connect();    &#125;    async connect() &#123;         try &#123;            this.room = await this.client.joinOrCreate(&quot;my_room&quot;);            console.log(&quot;joined successfully!&quot;);            console.log(&quot;user&#39;s sessionId:&quot;, this.room.sessionId);            this.room.onStateChange((state) =&gt; &#123;                console.log(&quot;onStateChange: &quot;, state);            &#125;);            this.room.onLeave((code) =&gt; &#123;                console.log(&quot;onLeave:&quot;, code);            &#125;);        &#125; catch (e) &#123;            console.error(e);        &#125;    &#125;&#125;</code></pre><p>然后就可以把 NetworkManager 作为组件安放在 Cocos Creator 的任意节点上.</p><p>因为上面用到了 @property 装饰词, 所以 hostname, port 和 useSSL 这些变量都可以在 Cocos Creator 中修改:</p><p><img src="https://docs.colyseus.io/colyseus/getting-started/cocos-creator-component.png" alt="Colyseus SDK on TypeScript Component"></p><hr><h4 id="另一种方法-手动将-colyseus-js-文件导入项目-不使用扩展插件"><a href="#另一种方法-手动将-colyseus-js-文件导入项目-不使用扩展插件" class="headerlink" title="另一种方法: 手动将 colyseus.js 文件导入项目 (不使用扩展插件)"></a>另一种方法: 手动将 colyseus.js 文件导入项目 (不使用扩展插件)</h4><ul><li><p><a href="https://github.com/colyseus/colyseus.js/releases">从 GitHub 上下载最新版 <code>colyseus-js-client.zip</code></a>.</p></li><li><p>把 <code>colyseus-js-client.zip</code> 里的文件解压到 <code>assets/</code> 文件夹里.</p></li><li><p>把 <code>colyseus.js</code> 和 <code>colyseus.d.ts</code> 文件移动到 Cocos Creator 项目的 <code>scripts</code> 文件夹里.</p></li><li><p>在资源面板点击 <code>colyseus.js</code>, 开启 “Import As Plugin” (详见下文图片)</p></li><li><p><strong>TypeScript</strong>: 使用 <code>import Colyseus from &quot;./colyseus.js&quot;;</code> 引入</p></li><li><p><strong>JavaScript</strong>: 使用 <code>const Colyseus = require(&quot;./colyseus.js&quot;);</code> 引入</p></li></ul><p><img src="https://docs.colyseus.io/colyseus/getting-started/cocos-creator-import-as-plugin.png" alt="Import as plugin"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://cocos.com/creator&quot;&gt;Cocos Creator&lt;/a&gt; 是跨平台 2D/3D 游戏开发工具.&lt;/p&gt;</summary>
    
    
    
    
    <category term="blog" scheme="https://cocosgames.com/tags/blog/"/>
    
    <category term="game" scheme="https://cocosgames.com/tags/game/"/>
    
  </entry>
  
  <entry>
    <title>Colyseus 为 Cocos Store 带来开源后端联网服务</title>
    <link href="https://cocosgames.com/2021/08/19/Colyseus%20%E4%B8%BA%20Cocos%20Store%20%E5%B8%A6%E6%9D%A5%E5%BC%80%E6%BA%90%E5%90%8E%E7%AB%AF%E8%81%94%E7%BD%91%E6%9C%8D%E5%8A%A1/"/>
    <id>https://cocosgames.com/2021/08/19/Colyseus%20%E4%B8%BA%20Cocos%20Store%20%E5%B8%A6%E6%9D%A5%E5%BC%80%E6%BA%90%E5%90%8E%E7%AB%AF%E8%81%94%E7%BD%91%E6%9C%8D%E5%8A%A1/</id>
    <published>2021-08-19T10:49:26.208Z</published>
    <updated>2023-03-13T11:16:07.958Z</updated>
    
    <content type="html"><![CDATA[<p>自从 Cocos Creator 3.0 之后, 我们更新了 <a href="http://store.cocos.com/app/en">Cocos Store</a>, 这是一个可以让开发者对外发布免费或者收费资源, 比如音乐, 图片, 代码之类的地方.<br>Cocos Store 及其资源在全世界范围内人气持续攀升. 精妙的工具不断涌现, 其背后的开发商功不可没. 其中具有代表性的就是由 Lucid Sight 团队开发的开源后端网络系统 <a href="https://www.colyseus.io/">Colyseus</a>.</p><a id="more"></a><p><img src="https://www.cocos.com/wp-content/uploads/2021/06/ColyseusLogo-1024x563.png" alt="Colyseus"></p><p>如果你缺乏后台开发经验或者在开发多人在线游戏时遇到麻烦, 那么开源服务器 Colyseus 及其技术团队将成为你的救星. Colyseus 是一款易用, 好用的多人在线游戏服务器, 这一点已被诸多 HTML5 和手机游戏证明.</p><p>现在它来到了 <a href="http://store.cocos.com/app/detail/2937">Cocos Store</a>, 我们通力合作确保其在 Cocos Creator 上完美运行, 并且筹划了未来的合作规划.</p><p>这里我们有请 Colyseus 的创作者 <strong>Endel Dreyer</strong>, 与 Lucid Sight 的首席技术官, Colyseus 的拥有者 <strong>Farzi Zubair</strong> 接受采访.</p><hr><p><strong>Cocos: 很高兴采访二位. 对于没听说过 Colyseus 的开发者, 你们会如何介绍自己?</strong></p><p>Colyseus 团队: 直截了当, 我们的目的是将多人在线服务大众化, 所以我们开发了 Colyseus, 一款基于 Node.js 的高级多人在线后台服务平台.</p><p>我们的初心是简化多人在线游戏的实现, 以便开发者更专注于自己的游戏体验而不必承受后台开发的种种困难. 而且, Colyseus 提供服务端与客户端全套的解决方案就是为了方便开发者使用.</p><p><strong>C: 为什么基于 Node.js?</strong></p><p>CT: Node.js 通过各种方式致力于打造完美开发体验的生态系统. 其 JIT 编译器能提供比某些 C 语言程序高出许多倍的性能. Node.js 程序运行比 Java 需要的内存更少. 而且 Colyseus 得益于 Node.js 提供的各种模块. 各种问题都可以通过搜索 (和制作) 模块找到解决方法, 比如寻路, 导航, 连接数据库等等.</p><p><strong>C: 听起来很有吸引力. 那么 Colyseus 作为一款联网工具相对于开发者已有的网络工具有什么优势呢?</strong></p><p>CT: 市面上有许多多人在线服务框架. 但是以我们的经验, 我们能提供开发者需求的绝大多数功能. 作为独立开发者, 通常无力负担大额的游戏服务软件费用, 无法直接做到服务器扩张, 或者服务器代码难以修改以适应自己的游戏.</p><p>我们的软件是开源的, 这就为开发者提供了免费的服务器程序及其修改权 (MIT协议). 这也使得 <strong>Colyseus</strong> 能运行于各种容器, 并且缩放自如 (无论是自建还是订阅 <strong>Colyseus Arena</strong> 服务都能实现快速缩放), 高级 API 使得服务器与客户端沟通更加流畅.</p><p><strong>C: 我看到你们为很多游戏引擎开发了客户端, 但是作为西方最大支持者之一, 为什么看中 Cocos Creator 和 Cocos2d-x 了呢?</strong></p><p>CT: Cocos 产品名声在外. Cocos 社区也招人爱. 我们想为其游戏开发者提供最好的多人在线解决方案. 另外, 我们是开源社区的大fan, 专门支持像 Cocos 这样的开源项目.</p><p><strong>C: 我们注意到你们的产品是用 TypeScript 写的, 就像 Cocos Creator 一样. 为什么做出使用 TS 这个决定, 这对于 Cocos Creator 意味着什么?</strong></p><p>CT: TypeScript 意味着更好的可维护性. 对于程序员来说比 JavaScript 更好. JavaScript 程序员总是犯下拼写错误这类能直接导致服务器崩溃的失误. 但是一旦使用 TypeScript, 编译器就会阻止这种事情发生. Colyseus SDK 包含全部类型定义 - 你甚至可以从 Cocos Creator 里直接获取服务端状态变量.</p><p><strong>C: 让项目接入 Colyseus 服务有多容易?</strong></p><p>CT: 首先打开商店页面找到 Colyseus 插件. 下载安装.之后就可以在你的 Typescript 组件里使用了. 实现把客户端连接到一个 (或多个) 房间, 房间里的客户端互相传递信息, 监听服务器状态变化这样各种的功能.</p><p><img src="https://www.cocos.com/wp-content/uploads/2021/06/Endel-Dreyer-1024x1024.jpg" alt="Endel Dreyer"></p><p><strong>Endel Dreyer</strong></p><p><strong>C: 换个话题. 我们观察到多人在线游戏从以前的不到十人到如今的50, 100 甚至上千人于一个副本中同时在线. Colyseus 对于这种需求是如何满足的呢?</strong></p><p>CT: 好问题. Colyseus 非常灵活，它可以为任何游戏类型或使用要求提供解决方案，因为它是开箱即用的基于房间的后台服务系统. 根据游戏复杂程度, 每个房间可以轻松支持 1500 个并发玩家 (CCU). 要是你想制作大型多人在线游戏 (MMO), 我们建议你把 “游戏世界” 分成若干个房间, 再用多线程同步房间逻辑.</p><p>我们在自己的 MMO 游戏 CSC 中使用了这种 “分割游戏世界” 的方案. 具体来说就是把宇宙根据坐标分割为多个房间. 通过设置房间参数就能实现这个功能, 然后再让客户端根据房间参数加入各个房间即可.</p><p>举个例子, 当一个玩家进入游戏时, 他的坐标是太阳系 (我们设计的) 0, 0 点即太阳的位置. 当他移动的时候, 我们根据区域定义他的新坐标. 比如一个区域是 10,000 平方公里. 当他远离太阳时, 他的坐标可能是九宫格区域之一 (0,1 1,0 1,1 -1,0 以此类推.. – 房间命名比如 “sol_0_1 =  0,1” 这样). 为了移动平滑, 我们在一开始就让玩家进入了这 9 个房间. 即初始房间和九宫格的另外 8 个房间. 玩家移动时不断地离开房间和加入新房间, 使得他始终能收到当前坐标房间和移动方向目标房间的信息. 加入多个房间的另一用途就是为玩家提供全局消息 / 聊天消息 (比如 “sol_chat, sol_global” 房间). 全 3D 世界的话也可以使用类似机制, 不同的就是把二维坐标改成三维的.</p><p>对于服务缩放, 有许多解决方法, 主要取决于你的游戏类型和游戏设计. 每个服务器上每个房间应该容纳多少人上限要合理. 这个数值很大程度上取决于游戏类型, 每秒信息数量以及游戏逻辑复杂程度. 这就是我们为 Colyseus 提供的 SaaS 托管解决方案的魅力所在. 作为程序员, 你大可不必担心服务器容量, 比如新开房间, 游戏世界随玩家数量增长而变大之类的压力. 我们的 Colyseus Arena 系统能根据你的游戏服务压力情况自动部署新服务器以保持平衡, 确保每个房间都能高效运作.</p><p><strong>C: Colyseus 为开发者提供了什么样的功能?</strong></p><p>CT: 除了刚才提到的 “房间” 机制, Colyseus 还有独创的同步机制以取代平常的收发消息功能. 改变服务器状态时客户端都会收到回调反馈.</p><p>我们的房间状态同步算法能确保网路上只有必要的部分信息在传播. 当服务器端结构变化时, 客户端会在下个 “补间时段” 与服务器同步.</p><p><strong>C: 我们很多开发人员都是这个行业的新手，所以我们很想知道网络技术在过去几年里是如何进化到今天的?</strong></p><p>CT: 最近几年间最显著的进化是容器的引入以及系统的灵活和伸缩性. 使用容器能让开发者更有效地创建和卸载服务程序. 配置得当的话, 游戏就可以轻易支持更多玩家同时不需要维护和为多余的服务器买单. Colyseus 是基于 Node.js 的轻型框架, 天生就是完美的容器应用服务系统.</p><p>过去的游戏后台要么使用最高端昂贵的机器, 要么就是使用许多的虚拟机. 容器有点像虚拟机但是部署上比虚拟机快得多. 也就是说不管新开还是卸载都能很快完成, 省去了大量因为服务缩放而产生的费用.</p><p><img src="https://www.cocos.com/wp-content/uploads/2021/06/Farzi-Zubair-819x1024.png" alt="Farzi Zubair"><br><strong>Farzi Zubair</strong></p><p><strong>C: 感觉不错啊. 要是开发者开始使用 Colyseus 开发游戏, 你能给出一些对提升游戏有帮助的建议吗?</strong></p><p>CT: 任何第一次制作多人在线游戏的开发者都应该牢记以下事情.</p><ol><li><p>开发游戏时就要考虑到作弊者，并使服务器尽可能具有权威性——因为作弊会导致游戏的完全失败. 一旦您的游戏上线，您的团队会忙不迭地工作并且急于修补漏洞，而作弊部分可能会成为最为高昂的资源消耗。这就是为什么我总是建议开发人员从一开始就尝试使服务器尽可能具有权威性, 将可能影响游戏结果的逻辑和功能限制在服务器代码中, 杜绝玩家找到作弊或破解游戏的方法.</p></li><li><p>专注于游戏体验, 把服务器端交给值得信赖的 SaaS 服务 – 自托管非常适合开发调试, 但是一旦开始就要尽快找到你的 DevOps 解决方案或者 SaaS 服务. 我们见到许多开发商到离游戏上线还剩最后几周, 都还没有考虑服务器或 SaaS 的事.</p></li></ol><p>有一个叫做 Agones 的开源服务器就做得很好.  它运行在基于 Kubernetes  上的大量 docker 容器中. 但是, 要是独立开发者或者从未与托管服务打过交道, 你会发现忽略了服务器环境这个大问题.  这通常会导致服务器匹配和 SDK 整合的失败. 所以做游戏除了开发工作还不够, 还需要聘请 DevOps 工程师然后找到合适的服务器. 对于小型游戏工作室来说, 这无疑是一笔巨大的前期成本, 并且早晚都要支付.</p><p>所以 SaaS 服务可能是更好的选择. 使用合适的 SaaS 解决方案, 您只需按使用量或 CCU 付费, 在游戏上线初期费用很低, 而当游戏越来越受欢迎的时候轻松扩张. Colyseus Arena 就是这样的解决方案, 专门设计用来运行游戏的 Colyseus 代码.</p><ol start="3"><li>保持简单 – 这可能是我们为 MMO 游戏开发者给出的最重要建议. 开发多人游戏的新手很多都着眼于消息发送和游戏的复杂度上面. 我总是建议他们尽快制作游戏原型或 MVP. 然后进行游戏测试, 确保游戏体验, 然后将其作为模板, 以更有效率的方式重新创建游戏服务器/客户端. 这种二次开发中往往更有效率.</li></ol><p><strong>Colyseus 未来的目标是什么?</strong></p><p>我们的目标一直是做你想要的 “那个” 服务器. 我们从社区获得的请求大多是支持 WebSockets 以外的其他协议, 比如 rUDP 或 WebRTC. 另一个对我们很有意义的请求是提供一个实体-组件模式. 我们一直在倾听社区和客户的更多建议.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;自从 Cocos Creator 3.0 之后, 我们更新了 &lt;a href=&quot;http://store.cocos.com/app/en&quot;&gt;Cocos Store&lt;/a&gt;, 这是一个可以让开发者对外发布免费或者收费资源, 比如音乐, 图片, 代码之类的地方.&lt;br&gt;Cocos Store 及其资源在全世界范围内人气持续攀升. 精妙的工具不断涌现, 其背后的开发商功不可没. 其中具有代表性的就是由 Lucid Sight 团队开发的开源后端网络系统 &lt;a href=&quot;https://www.colyseus.io/&quot;&gt;Colyseus&lt;/a&gt;.&lt;/p&gt;</summary>
    
    
    
    
    <category term="blog" scheme="https://cocosgames.com/tags/blog/"/>
    
    <category term="game" scheme="https://cocosgames.com/tags/game/"/>
    
  </entry>
  
  <entry>
    <title>Learn Lua in 15 Minutes</title>
    <link href="https://cocosgames.com/2021/04/30/learning_lua/"/>
    <id>https://cocosgames.com/2021/04/30/learning_lua/</id>
    <published>2021-04-30T11:47:43.208Z</published>
    <updated>2021-04-30T11:49:57.203Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Learn-Lua-in-15-Minutes-by-Tyler-Neylon"><a href="#Learn-Lua-in-15-Minutes-by-Tyler-Neylon" class="headerlink" title="Learn Lua in 15 Minutes by Tyler Neylon"></a>Learn Lua in 15 Minutes by Tyler Neylon</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br></pre></td><td class="code"><pre><span class="line">-- Two dashes start a one-line comment.</span><br><span class="line"></span><br><span class="line">--[[</span><br><span class="line">Adding two [&#39;s and ]&#39;s makes it a</span><br><span class="line">multi-line comment.</span><br><span class="line">--]]</span><br><span class="line"></span><br><span class="line">----------------------------------------------------</span><br><span class="line">-- 1. Variables and flow control.</span><br><span class="line">----------------------------------------------------</span><br><span class="line"></span><br><span class="line">num &#x3D; 42  -- All numbers are doubles.</span><br><span class="line">-- Don&#39;t freak out, 64-bit doubles have 52 bits for</span><br><span class="line">-- storing exact int values; machine precision is</span><br><span class="line">-- not a problem for ints that need &lt; 52 bits.</span><br><span class="line"></span><br><span class="line">s &#x3D; &#39;walternate&#39;  -- Immutable strings like Python.</span><br><span class="line">t &#x3D; &quot;double-quotes are also fine&quot;</span><br><span class="line">u &#x3D; [[ Double brackets</span><br><span class="line">start and end</span><br><span class="line">multi-line strings.]]</span><br><span class="line">t &#x3D; nil  -- Undefines t; Lua has garbage collection.</span><br><span class="line"></span><br><span class="line">-- Blocks are denoted with keywords like do&#x2F;end:</span><br><span class="line">while num &lt; 50 do</span><br><span class="line">num &#x3D; num + 1  -- No ++ or +&#x3D; type operators.</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">-- If clauses:</span><br><span class="line">if num &gt; 40 then</span><br><span class="line">print(&#39;over 40&#39;)</span><br><span class="line">elseif s ~&#x3D; &#39;walternate&#39; then  -- ~&#x3D; is not equals.</span><br><span class="line">-- Equality check is &#x3D;&#x3D; like Python; ok for strs.</span><br><span class="line">io.write(&#39;not over 40\n&#39;)  -- Defaults to stdout.</span><br><span class="line">else</span><br><span class="line">-- Variables are global by default.</span><br><span class="line">thisIsGlobal &#x3D; 5  -- Camel case is common.</span><br><span class="line"></span><br><span class="line">-- How to make a variable local:</span><br><span class="line">local line &#x3D; io.read()  -- Reads next stdin line.</span><br><span class="line"></span><br><span class="line">-- String concatenation uses the .. operator:</span><br><span class="line">print(&#39;Winter is coming, &#39; .. line)</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">-- Undefined variables return nil.</span><br><span class="line">-- This is not an error:</span><br><span class="line">foo &#x3D; anUnknownVariable  -- Now foo &#x3D; nil.</span><br><span class="line"></span><br><span class="line">aBoolValue &#x3D; false</span><br><span class="line"></span><br><span class="line">-- Only nil and false are falsy; 0 and &#39;&#39; are true!</span><br><span class="line">if not aBoolValue then print(&#39;twas false&#39;) end</span><br><span class="line"></span><br><span class="line">-- &#39;or&#39; and &#39;and&#39; are short-circuited.</span><br><span class="line">-- This is similar to the a?b:c operator in C&#x2F;js:</span><br><span class="line">ans &#x3D; aBoolValue and &#39;yes&#39; or &#39;no&#39;  --&gt; &#39;no&#39;</span><br><span class="line"></span><br><span class="line">karlSum &#x3D; 0</span><br><span class="line">for i &#x3D; 1, 100 do  -- The range includes both ends.</span><br><span class="line">karlSum &#x3D; karlSum + i</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">-- Use &quot;100, 1, -1&quot; as the range to count down:</span><br><span class="line">fredSum &#x3D; 0</span><br><span class="line">for j &#x3D; 100, 1, -1 do fredSum &#x3D; fredSum + j end</span><br><span class="line"></span><br><span class="line">-- In general, the range is begin, end[, step].</span><br><span class="line"></span><br><span class="line">-- Another loop construct:</span><br><span class="line">repeat</span><br><span class="line">print(&#39;the way of the future&#39;)</span><br><span class="line">num &#x3D; num - 1</span><br><span class="line">until num &#x3D;&#x3D; 0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">----------------------------------------------------</span><br><span class="line">-- 2. Functions.</span><br><span class="line">----------------------------------------------------</span><br><span class="line"></span><br><span class="line">function fib(n)</span><br><span class="line">if n &lt; 2 then return 1 end</span><br><span class="line">return fib(n - 2) + fib(n - 1)</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">-- Closures and anonymous functions are ok:</span><br><span class="line">function adder(x)</span><br><span class="line">-- The returned function is created when adder is</span><br><span class="line">-- called, and remembers the value of x:</span><br><span class="line">return function (y) return x + y end</span><br><span class="line">end</span><br><span class="line">a1 &#x3D; adder(9)</span><br><span class="line">a2 &#x3D; adder(36)</span><br><span class="line">print(a1(16))  --&gt; 25</span><br><span class="line">print(a2(64))  --&gt; 100</span><br><span class="line"></span><br><span class="line">-- Returns, func calls, and assignments all work</span><br><span class="line">-- with lists that may be mismatched in length.</span><br><span class="line">-- Unmatched receivers are nil;</span><br><span class="line">-- unmatched senders are discarded.</span><br><span class="line"></span><br><span class="line">x, y, z &#x3D; 1, 2, 3, 4</span><br><span class="line">-- Now x &#x3D; 1, y &#x3D; 2, z &#x3D; 3, and 4 is thrown away.</span><br><span class="line"></span><br><span class="line">function bar(a, b, c)</span><br><span class="line">print(a, b, c)</span><br><span class="line">return 4, 8, 15, 16, 23, 42</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">x, y &#x3D; bar(&#39;zaphod&#39;)  --&gt; prints &quot;zaphod  nil nil&quot;</span><br><span class="line">-- Now x &#x3D; 4, y &#x3D; 8, values 15..42 are discarded.</span><br><span class="line"></span><br><span class="line">-- Functions are first-class, may be local&#x2F;global.</span><br><span class="line">-- These are the same:</span><br><span class="line">function f(x) return x * x end</span><br><span class="line">f &#x3D; function (x) return x * x end</span><br><span class="line"></span><br><span class="line">-- And so are these:</span><br><span class="line">local function g(x) return math.sin(x) end</span><br><span class="line">local g; g  &#x3D; function (x) return math.sin(x) end</span><br><span class="line">-- the &#39;local g&#39; decl makes g-self-references ok.</span><br><span class="line"></span><br><span class="line">-- Trig funcs work in radians, by the way.</span><br><span class="line"></span><br><span class="line">-- Calls with one string param don&#39;t need parens:</span><br><span class="line">print &#39;hello&#39;  -- Works fine.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">----------------------------------------------------</span><br><span class="line">-- 3. Tables.</span><br><span class="line">----------------------------------------------------</span><br><span class="line"></span><br><span class="line">-- Tables &#x3D; Lua&#39;s only compound data structure;</span><br><span class="line">--          they are associative arrays.</span><br><span class="line">-- Similar to php arrays or js objects, they are</span><br><span class="line">-- hash-lookup dicts that can also be used as lists.</span><br><span class="line"></span><br><span class="line">-- Using tables as dictionaries &#x2F; maps:</span><br><span class="line"></span><br><span class="line">-- Dict literals have string keys by default:</span><br><span class="line">t &#x3D; &#123;key1 &#x3D; &#39;value1&#39;, key2 &#x3D; false&#125;</span><br><span class="line"></span><br><span class="line">-- String keys can use js-like dot notation:</span><br><span class="line">print(t.key1)  -- Prints &#39;value1&#39;.</span><br><span class="line">t.newKey &#x3D; &#123;&#125;  -- Adds a new key&#x2F;value pair.</span><br><span class="line">t.key2 &#x3D; nil   -- Removes key2 from the table.</span><br><span class="line"></span><br><span class="line">-- Literal notation for any (non-nil) value as key:</span><br><span class="line">u &#x3D; &#123;[&#39;@!#&#39;] &#x3D; &#39;qbert&#39;, [&#123;&#125;] &#x3D; 1729, [6.28] &#x3D; &#39;tau&#39;&#125;</span><br><span class="line">print(u[6.28])  -- prints &quot;tau&quot;</span><br><span class="line"></span><br><span class="line">-- Key matching is basically by value for numbers</span><br><span class="line">-- and strings, but by identity for tables.</span><br><span class="line">a &#x3D; u[&#39;@!#&#39;]  -- Now a &#x3D; &#39;qbert&#39;.</span><br><span class="line">b &#x3D; u[&#123;&#125;]     -- We might expect 1729, but it&#39;s nil:</span><br><span class="line">-- b &#x3D; nil since the lookup fails. It fails</span><br><span class="line">-- because the key we used is not the same object</span><br><span class="line">-- as the one used to store the original value. So</span><br><span class="line">-- strings &amp; numbers are more portable keys.</span><br><span class="line"></span><br><span class="line">-- A one-table-param function call needs no parens:</span><br><span class="line">function h(x) print(x.key1) end</span><br><span class="line">h&#123;key1 &#x3D; &#39;Sonmi~451&#39;&#125;  -- Prints &#39;Sonmi~451&#39;.</span><br><span class="line"></span><br><span class="line">for key, val in pairs(u) do  -- Table iteration.</span><br><span class="line">print(key, val)</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">-- _G is a special table of all globals.</span><br><span class="line">print(_G[&#39;_G&#39;] &#x3D;&#x3D; _G)  -- Prints &#39;true&#39;.</span><br><span class="line"></span><br><span class="line">-- Using tables as lists &#x2F; arrays:</span><br><span class="line"></span><br><span class="line">-- List literals implicitly set up int keys:</span><br><span class="line">v &#x3D; &#123;&#39;value1&#39;, &#39;value2&#39;, 1.21, &#39;gigawatts&#39;&#125;</span><br><span class="line">for i &#x3D; 1, #v do  -- #v is the size of v for lists.</span><br><span class="line">print(v[i])  -- Indices start at 1 !! SO CRAZY!</span><br><span class="line">end</span><br><span class="line">-- A &#39;list&#39; is not a real type. v is just a table</span><br><span class="line">-- with consecutive integer keys, treated as a list.</span><br><span class="line"></span><br><span class="line">----------------------------------------------------</span><br><span class="line">-- 3.1 Metatables and metamethods.</span><br><span class="line">----------------------------------------------------</span><br><span class="line"></span><br><span class="line">-- A table can have a metatable that gives the table</span><br><span class="line">-- operator-overloadish behavior. Later we&#39;ll see</span><br><span class="line">-- how metatables support js-prototypey behavior.</span><br><span class="line"></span><br><span class="line">f1 &#x3D; &#123;a &#x3D; 1, b &#x3D; 2&#125;  -- Represents the fraction a&#x2F;b.</span><br><span class="line">f2 &#x3D; &#123;a &#x3D; 2, b &#x3D; 3&#125;</span><br><span class="line"></span><br><span class="line">-- This would fail:</span><br><span class="line">-- s &#x3D; f1 + f2</span><br><span class="line"></span><br><span class="line">metafraction &#x3D; &#123;&#125;</span><br><span class="line">function metafraction.__add(f1, f2)</span><br><span class="line">sum &#x3D; &#123;&#125;</span><br><span class="line">sum.b &#x3D; f1.b * f2.b</span><br><span class="line">sum.a &#x3D; f1.a * f2.b + f2.a * f1.b</span><br><span class="line">return sum</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">setmetatable(f1, metafraction)</span><br><span class="line">setmetatable(f2, metafraction)</span><br><span class="line"></span><br><span class="line">s &#x3D; f1 + f2  -- call __add(f1, f2) on f1&#39;s metatable</span><br><span class="line"></span><br><span class="line">-- f1, f2 have no key for their metatable, unlike</span><br><span class="line">-- prototypes in js, so you must retrieve it as in</span><br><span class="line">-- getmetatable(f1). The metatable is a normal table</span><br><span class="line">-- with keys that Lua knows about, like __add.</span><br><span class="line"></span><br><span class="line">-- But the next line fails since s has no metatable:</span><br><span class="line">-- t &#x3D; s + s</span><br><span class="line">-- Class-like patterns given below would fix this.</span><br><span class="line"></span><br><span class="line">-- An __index on a metatable overloads dot lookups:</span><br><span class="line">defaultFavs &#x3D; &#123;animal &#x3D; &#39;gru&#39;, food &#x3D; &#39;donuts&#39;&#125;</span><br><span class="line">myFavs &#x3D; &#123;food &#x3D; &#39;pizza&#39;&#125;</span><br><span class="line">setmetatable(myFavs, &#123;__index &#x3D; defaultFavs&#125;)</span><br><span class="line">eatenBy &#x3D; myFavs.animal  -- works! thanks, metatable</span><br><span class="line"></span><br><span class="line">-- Direct table lookups that fail will retry using</span><br><span class="line">-- the metatable&#39;s __index value, and this recurses.</span><br><span class="line"></span><br><span class="line">-- An __index value can also be a function(tbl, key)</span><br><span class="line">-- for more customized lookups.</span><br><span class="line"></span><br><span class="line">-- Values of __index,add, .. are called metamethods.</span><br><span class="line">-- Full list. Here a is a table with the metamethod.</span><br><span class="line"></span><br><span class="line">-- __add(a, b)                     for a + b</span><br><span class="line">-- __sub(a, b)                     for a - b</span><br><span class="line">-- __mul(a, b)                     for a * b</span><br><span class="line">-- __div(a, b)                     for a &#x2F; b</span><br><span class="line">-- __mod(a, b)                     for a % b</span><br><span class="line">-- __pow(a, b)                     for a ^ b</span><br><span class="line">-- __unm(a)                        for -a</span><br><span class="line">-- __concat(a, b)                  for a .. b</span><br><span class="line">-- __len(a)                        for #a</span><br><span class="line">-- __eq(a, b)                      for a &#x3D;&#x3D; b</span><br><span class="line">-- __lt(a, b)                      for a &lt; b</span><br><span class="line">-- __le(a, b)                      for a &lt;&#x3D; b</span><br><span class="line">-- __index(a, b)  &lt;fn or a table&gt;  for a.b</span><br><span class="line">-- __newindex(a, b, c)             for a.b &#x3D; c</span><br><span class="line">-- __call(a, ...)                  for a(...)</span><br><span class="line"></span><br><span class="line">----------------------------------------------------</span><br><span class="line">-- 3.2 Class-like tables and inheritance.</span><br><span class="line">----------------------------------------------------</span><br><span class="line"></span><br><span class="line">-- Classes aren&#39;t built in; there are different ways</span><br><span class="line">-- to make them using tables and metatables.</span><br><span class="line"></span><br><span class="line">-- Explanation for this example is below it.</span><br><span class="line"></span><br><span class="line">Dog &#x3D; &#123;&#125;                                   -- 1.</span><br><span class="line"></span><br><span class="line">function Dog:new()                         -- 2.</span><br><span class="line">newObj &#x3D; &#123;sound &#x3D; &#39;woof&#39;&#125;                -- 3.</span><br><span class="line">self.__index &#x3D; self                      -- 4.</span><br><span class="line">return setmetatable(newObj, self)        -- 5.</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">function Dog:makeSound()                   -- 6.</span><br><span class="line">print(&#39;I say &#39; .. self.sound)</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">mrDog &#x3D; Dog:new()                          -- 7.</span><br><span class="line">mrDog:makeSound()  -- &#39;I say woof&#39;         -- 8.</span><br><span class="line"></span><br><span class="line">-- 1. Dog acts like a class; it&#39;s really a table.</span><br><span class="line">-- 2. function tablename:fn(...) is the same as</span><br><span class="line">--    function tablename.fn(self, ...)</span><br><span class="line">--    The : just adds a first arg called self.</span><br><span class="line">--    Read 7 &amp; 8 below for how self gets its value.</span><br><span class="line">-- 3. newObj will be an instance of class Dog.</span><br><span class="line">-- 4. self &#x3D; the class being instantiated. Often</span><br><span class="line">--    self &#x3D; Dog, but inheritance can change it.</span><br><span class="line">--    newObj gets self&#39;s functions when we set both</span><br><span class="line">--    newObj&#39;s metatable and self&#39;s __index to self.</span><br><span class="line">-- 5. Reminder: setmetatable returns its first arg.</span><br><span class="line">-- 6. The : works as in 2, but this time we expect</span><br><span class="line">--    self to be an instance instead of a class.</span><br><span class="line">-- 7. Same as Dog.new(Dog), so self &#x3D; Dog in new().</span><br><span class="line">-- 8. Same as mrDog.makeSound(mrDog); self &#x3D; mrDog.</span><br><span class="line"></span><br><span class="line">----------------------------------------------------</span><br><span class="line"></span><br><span class="line">-- Inheritance example:</span><br><span class="line"></span><br><span class="line">LoudDog &#x3D; Dog:new()                           -- 1.</span><br><span class="line"></span><br><span class="line">function LoudDog:makeSound()</span><br><span class="line">s &#x3D; self.sound .. &#39; &#39;                       -- 2.</span><br><span class="line">print(s .. s .. s)</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">seymour &#x3D; LoudDog:new()                       -- 3.</span><br><span class="line">seymour:makeSound()  -- &#39;woof woof woof&#39;      -- 4.</span><br><span class="line"></span><br><span class="line">-- 1. LoudDog gets Dog&#39;s methods and variables.</span><br><span class="line">-- 2. self has a &#39;sound&#39; key from new(), see 3.</span><br><span class="line">-- 3. Same as LoudDog.new(LoudDog), and converted to</span><br><span class="line">--    Dog.new(LoudDog) as LoudDog has no &#39;new&#39; key,</span><br><span class="line">--    but does have __index &#x3D; Dog on its metatable.</span><br><span class="line">--    Result: seymour&#39;s metatable is LoudDog, and</span><br><span class="line">--    LoudDog.__index &#x3D; LoudDog. So seymour.key will</span><br><span class="line">--    &#x3D; seymour.key, LoudDog.key, Dog.key, whichever</span><br><span class="line">--    table is the first with the given key.</span><br><span class="line">-- 4. The &#39;makeSound&#39; key is found in LoudDog; this</span><br><span class="line">--    is the same as LoudDog.makeSound(seymour).</span><br><span class="line"></span><br><span class="line">-- If needed, a subclass&#39;s new() is like the base&#39;s:</span><br><span class="line">function LoudDog:new()</span><br><span class="line">newObj &#x3D; &#123;&#125;</span><br><span class="line">-- set up newObj</span><br><span class="line">self.__index &#x3D; self</span><br><span class="line">return setmetatable(newObj, self)</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">----------------------------------------------------</span><br><span class="line">-- 4. Modules.</span><br><span class="line">----------------------------------------------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">--[[ I&#39;m commenting out this section so the rest of</span><br><span class="line">--   this script remains runnable.</span><br><span class="line">-- Suppose the file mod.lua looks like this:</span><br><span class="line">local M &#x3D; &#123;&#125;</span><br><span class="line"></span><br><span class="line">local function sayMyName()</span><br><span class="line">print(&#39;Hrunkner&#39;)</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">function M.sayHello()</span><br><span class="line">print(&#39;Why hello there&#39;)</span><br><span class="line">sayMyName()</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">return M</span><br><span class="line"></span><br><span class="line">-- Another file can use mod.lua&#39;s functionality:</span><br><span class="line">local mod &#x3D; require(&#39;mod&#39;)  -- Run the file mod.lua.</span><br><span class="line"></span><br><span class="line">-- require is the standard way to include modules.</span><br><span class="line">-- require acts like:     (if not cached; see below)</span><br><span class="line">local mod &#x3D; (function ()</span><br><span class="line">&lt;contents of mod.lua&gt;</span><br><span class="line">end)()</span><br><span class="line">-- It&#39;s like mod.lua is a function body, so that</span><br><span class="line">-- locals inside mod.lua are invisible outside it.</span><br><span class="line"></span><br><span class="line">-- This works because mod here &#x3D; M in mod.lua:</span><br><span class="line">mod.sayHello()  -- Says hello to Hrunkner.</span><br><span class="line"></span><br><span class="line">-- This is wrong; sayMyName only exists in mod.lua:</span><br><span class="line">mod.sayMyName()  -- error</span><br><span class="line"></span><br><span class="line">-- require&#39;s return values are cached so a file is</span><br><span class="line">-- run at most once, even when require&#39;d many times.</span><br><span class="line"></span><br><span class="line">-- Suppose mod2.lua contains &quot;print(&#39;Hi!&#39;)&quot;.</span><br><span class="line">local a &#x3D; require(&#39;mod2&#39;)  -- Prints Hi!</span><br><span class="line">local b &#x3D; require(&#39;mod2&#39;)  -- Doesn&#39;t print; a&#x3D;b.</span><br><span class="line"></span><br><span class="line">-- dofile is like require without caching:</span><br><span class="line">dofile(&#39;mod2.lua&#39;)  --&gt; Hi!</span><br><span class="line">dofile(&#39;mod2.lua&#39;)  --&gt; Hi! (runs it again)</span><br><span class="line"></span><br><span class="line">-- loadfile loads a lua file but doesn&#39;t run it yet.</span><br><span class="line">f &#x3D; loadfile(&#39;mod2.lua&#39;)  -- Call f() to run it.</span><br><span class="line"></span><br><span class="line">-- loadstring is loadfile for strings.</span><br><span class="line">g &#x3D; loadstring(&#39;print(343)&#39;)  -- Returns a function.</span><br><span class="line">g()  -- Prints out 343; nothing printed before now.</span><br><span class="line"></span><br><span class="line">--]]</span><br><span class="line"></span><br><span class="line">----------------------------------------------------</span><br><span class="line">-- 5. References.</span><br><span class="line">----------------------------------------------------</span><br><span class="line"></span><br><span class="line">--[[</span><br><span class="line"></span><br><span class="line">I was excited to learn Lua so I could make games</span><br><span class="line">with the Löve 2D game engine. That&#39;s the why.</span><br><span class="line"></span><br><span class="line">I started with BlackBulletIV&#39;s Lua for programmers.</span><br><span class="line">Next I read the official Programming in Lua book.</span><br><span class="line">That&#39;s the how.</span><br><span class="line"></span><br><span class="line">It might be helpful to check out the Lua short</span><br><span class="line">reference on lua-users.org.</span><br><span class="line"></span><br><span class="line">The main topics not covered are standard libraries:</span><br><span class="line">* string library</span><br><span class="line">* table library</span><br><span class="line">* math library</span><br><span class="line">* io library</span><br><span class="line">* os library</span><br><span class="line"></span><br><span class="line">By the way, this entire file is valid Lua; save it</span><br><span class="line">as learn.lua and run it with &quot;lua learn.lua&quot; !</span><br><span class="line"></span><br><span class="line">This was first written for tylerneylon.com. It&#39;s</span><br><span class="line">also available as a github gist. Tutorials for other</span><br><span class="line">languages, in the same style as this one, are here:</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;learnxinyminutes.com&#x2F;</span><br><span class="line"></span><br><span class="line">Have fun with Lua!</span><br><span class="line"></span><br><span class="line">--]]</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Learn Lua in 15 Minutes by Tyler Neylon</summary>
    
    
    
    
    <category term="blog" scheme="https://cocosgames.com/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>Learning to wren 2</title>
    <link href="https://cocosgames.com/2021/04/29/wren2/"/>
    <id>https://cocosgames.com/2021/04/29/wren2/</id>
    <published>2021-04-29T10:04:06.001Z</published>
    <updated>2021-04-29T11:19:26.096Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Wren-is-a-small-fast-class-based-concurrent-scripting-language"><a href="#Wren-is-a-small-fast-class-based-concurrent-scripting-language" class="headerlink" title="Wren is a small, fast, class-based concurrent scripting language."></a>Wren is a small, fast, class-based concurrent scripting language.</h3><h4 id="類"><a href="#類" class="headerlink" title="類"></a>類</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">class Unicorn &#123;</span><br><span class="line"> #hidden &#x3D; true &#x2F;&#x2F;屬性</span><br><span class="line"> isFancy &#123; true &#125; &#x2F;&#x2F;getter</span><br><span class="line"> rider&#x3D;(value) &#123; &#x2F;&#x2F;setter</span><br><span class="line">    System.print(&quot;I am being ridden by %(value).&quot;)</span><br><span class="line">  &#125;</span><br><span class="line">  - &#123; &#x2F;&#x2F;相反數</span><br><span class="line">    System.print(&quot;Negating a unicorn is weird.&quot;)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  -(other) &#123; &#x2F;&#x2F;減法</span><br><span class="line">    System.print(&quot;Subtracting %(other) from a unicorn is weird.&quot;)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  [index] &#123; &#x2F;&#x2F;索引</span><br><span class="line">    System.print(&quot;Unicorns are not lists!&quot;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  [x, y] &#123; &#x2F;&#x2F;二元索引</span><br><span class="line">    System.print(&quot;Unicorns are not matrices either!&quot;)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  [index]&#x3D;(value) &#123; &#x2F;&#x2F;索引setter</span><br><span class="line">    System.print(&quot;You can&#39;t stuff %(value) into me at %(index)!&quot;)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  prance() &#123;</span><br><span class="line">    System.print(&quot;The unicorn prances in a fancy manner!&quot;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  prance(where) &#123;</span><br><span class="line">    System.print(&quot;The unicorn prances in %(where).&quot;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  prance(where, when) &#123;</span><br><span class="line">    System.print(&quot;The unicorn prances in %(where) at %(when).&quot;)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  construct new(name, color) &#123; &#x2F;&#x2F;構造函數</span><br><span class="line">    System.print(&quot;My name is &quot; + name + &quot; and I am &quot; + color + &quot;.&quot;)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Pegasus is Unicorn &#123; &#x2F;&#x2F;繼承</span><br><span class="line">  construct new(name) &#123;</span><br><span class="line">    super(name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="協程"><a href="#協程" class="headerlink" title="協程"></a>協程</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var fiber &#x3D; Fiber.new &#123;|param|</span><br><span class="line">  System.print(param)</span><br><span class="line">  var result &#x3D; Fiber.yield()</span><br><span class="line">  System.print(result)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fiber.call(&quot;First&quot;) &#x2F;&#x2F;&gt; First</span><br><span class="line">fiber.call(&quot;Second&quot;) &#x2F;&#x2F;&gt; Second</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">My learning to wren language in Chinese part 2</summary>
    
    
    
    
    <category term="blog" scheme="https://cocosgames.com/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>Learning to wren 1</title>
    <link href="https://cocosgames.com/2021/04/27/wren1/"/>
    <id>https://cocosgames.com/2021/04/27/wren1/</id>
    <published>2021-04-27T08:13:52.324Z</published>
    <updated>2021-04-27T08:54:49.247Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Wren-is-a-small-fast-class-based-concurrent-scripting-language"><a href="#Wren-is-a-small-fast-class-based-concurrent-scripting-language" class="headerlink" title="Wren is a small, fast, class-based concurrent scripting language."></a>Wren is a small, fast, class-based concurrent scripting language.</h3><h4 id="注釋"><a href="#注釋" class="headerlink" title="注釋"></a>注釋</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; &#x2F;*  *&#x2F;</span><br></pre></td></tr></table></figure><h4 id="保留字"><a href="#保留字" class="headerlink" title="保留字"></a>保留字</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">as break class construct continue else false for foreign if import</span><br><span class="line">in is null return static super this true var while</span><br></pre></td></tr></table></figure><h4 id="控制臺輸出"><a href="#控制臺輸出" class="headerlink" title="控制臺輸出"></a>控制臺輸出</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.print(&quot;hi&quot;)</span><br></pre></td></tr></table></figure><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><h5 id="普通"><a href="#普通" class="headerlink" title="普通"></a>普通</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;test&quot;</span><br></pre></td></tr></table></figure><h5 id="强制"><a href="#强制" class="headerlink" title="强制"></a>强制</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">Hello world</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure><h4 id="範圍"><a href="#範圍" class="headerlink" title="範圍"></a>範圍</h4><h5 id="全包含"><a href="#全包含" class="headerlink" title="全包含"></a>全包含</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3..8</span><br></pre></td></tr></table></figure><h5 id="半包含"><a href="#半包含" class="headerlink" title="半包含"></a>半包含</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4...6</span><br></pre></td></tr></table></figure><h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var trees &#x3D; [&quot;cedar&quot;, &quot;birch&quot;, &quot;oak&quot;, &quot;willow&quot;]</span><br><span class="line">trees[0..-1]</span><br><span class="line">trees.count</span><br><span class="line">matrix[3, 5]</span><br></pre></td></tr></table></figure><h4 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;maple&quot;:  &quot;Sugar Maple (Acer Saccharum)&quot;,</span><br><span class="line">  &quot;larch&quot;:  &quot;Alpine Larch (Larix Lyallii)&quot;,</span><br><span class="line">  &quot;oak&quot;:    &quot;Red Oak (Quercus Rubra)&quot;,</span><br><span class="line">  &quot;fir&quot;:    &quot;Fraser Fir (Abies Fraseri)&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="循環"><a href="#循環" class="headerlink" title="循環"></a>循環</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for (i in 1..100) &#123;</span><br><span class="line">  System.print(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="函數"><a href="#函數" class="headerlink" title="函數"></a>函數</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var sayHello &#x3D; Fn.new &#123; System.print(&quot;hello&quot;) &#125;</span><br><span class="line">sayHello.call() &#x2F;&#x2F;&gt; hello</span><br><span class="line">link.onClick &#123;|button|</span><br><span class="line">  System.print(&quot;I was clicked by button %(button)&quot;)</span><br><span class="line">&#125;</span><br><span class="line">var onEvent &#x3D; Fn.new &#123;|button|</span><br><span class="line">  System.print(&quot;clicked by button %(button)&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="過濾"><a href="#過濾" class="headerlink" title="過濾"></a>過濾</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var filtered &#x3D; list.where &#123;|value| value &gt; 3 &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">My learning to wren language in Chinese part 1</summary>
    
    
    
    
    <category term="blog" scheme="https://cocosgames.com/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>Misunderstanding About Chinese TaiChi</title>
    <link href="https://cocosgames.com/2021/04/12/taichi/"/>
    <id>https://cocosgames.com/2021/04/12/taichi/</id>
    <published>2021-04-12T06:38:57.524Z</published>
    <updated>2021-04-15T07:38:53.653Z</updated>
    
    <content type="html"><![CDATA[<p>Because I am a Chinese, I know China very well.<br>Today I want to talk about Chinese Taijiquan(TaiChi). People from other countries, even the Chinese themselves, have completely deviated from the right track of TaiChi. This make scammers opportunities to conduct fraudulent activities.<br>So I want to correct these prejudices and prevent good people from being deceived. TaiChi is an ancient Chinese martial technique and also an art. Its function is to subdue opponents in confrontation (not killing them).<br>There are no other profound meanings, the harmony of the universe, the flow of energy, they are all made up by some people for hype.</p><h3 id="TaiChi-Moves-Slowly"><a href="#TaiChi-Moves-Slowly" class="headerlink" title="TaiChi Moves Slowly"></a>TaiChi Moves Slowly</h3><p>There is a reason. A real TaiChi boxer exercises a lot every day. But in ancient times you could not just find someone to beat, so most boxers practice alone.<br>No matter how strong you are, punches to the air, no force point, can hurt you. The longer you exercise, the greater the damage you will suffer.<br>Therefore, smart boxers will not use their 100% force to beat the air, but they will be gentle. Yes, practice the movements slowly.<br>The purpose is to strengthen the memory of the movements, not to train their own strength. But some people find that TaiChi movements are so slow, which is very suitable for old people who not able to do a lot of exercise.<br>But at this time that is not TaiChi, it’s just movement exercises for old people.</p><h3 id="TaiChi-can-harmonize-yin-and-yang-and-harmonize-the-universe"><a href="#TaiChi-can-harmonize-yin-and-yang-and-harmonize-the-universe" class="headerlink" title="TaiChi can harmonize yin and yang and harmonize the universe"></a>TaiChi can harmonize yin and yang and harmonize the universe</h3><p>Don’t believe the rhetoric fabricated by swindlers, they just want to make money.</p><h3 id="TaiChi-Trying-Avoid-Frontal-Confrontation"><a href="#TaiChi-Trying-Avoid-Frontal-Confrontation" class="headerlink" title="TaiChi Trying Avoid Frontal Confrontation"></a>TaiChi Trying Avoid Frontal Confrontation</h3><p>  <img src="/assets/taichi/quanji.jpg" alt="Boxing" title="Boxing"><br>  <img src="/assets/taichi/baiheliangchi.jpg" alt="TaiChi" title="TaiChi"></p><p>Boxing includes offense and defense. When defending, boxers use thick boxing gloves to cover the face. But TaiChi boxers don’t have gloves. Boxers want to avoid any punch.<br>They open their arms and open the their front side so they can quickly apply lateral force when opponents attacking. Instead of using the body to resist the impact.<br>In other words, this is the wisdom and superb technique of the ancients. Now I can not see any self-proclaimed master who got this technique.</p>]]></content>
    
    
    <summary type="html">I want to explain the misunderstanding about Chinese TaiChi☯.</summary>
    
    
    
    
    <category term="blog" scheme="https://cocosgames.com/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>Coco&#39;s Games on line</title>
    <link href="https://cocosgames.com/2020/12/26/online/"/>
    <id>https://cocosgames.com/2020/12/26/online/</id>
    <published>2020-12-26T07:06:28.804Z</published>
    <updated>2021-08-19T10:52:52.600Z</updated>
    
    <content type="html"><![CDATA[<p>Hi, my name is Coco. Welcome to my personal site. this is my first post. I’d like to share my opinion about what is a game.</p><blockquote><p>  <strong>A game is to tell, a game is to get.</strong><br>  <strong>A game is to think, a game is to learn.</strong><br>  <strong>A game is to encourage, a game is to try.</strong><br>  <strong>A game is to laugh, a game is to cry.</strong></p><hr><p>  <strong>So that, a game is to bring us a better life.</strong></p></blockquote><p>Thank you so much for reading it.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Hi, my name is Coco. Welcome to my personal site. this is my first post. I’d like to share my opinion about what is a game.&lt;/p&gt;
&lt;blockquo</summary>
      
    
    
    
    
    <category term="blog" scheme="https://cocosgames.com/tags/blog/"/>
    
  </entry>
  
</feed>
