<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Coco&#39;s Games</title>
  
  <subtitle>❃ FUN IS WORTH IT ❃</subtitle>
  <link href="https://cocosgames.com/atom.xml" rel="self"/>
  
  <link href="https://cocosgames.com/"/>
  <updated>2024-12-21T04:16:29.609Z</updated>
  <id>https://cocosgames.com/</id>
  
  <author>
    <name>Coco&#39;s Games</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Comparing Haxe and ActionScript</title>
    <link href="https://cocosgames.com/2024/12/21/HaxeVsAS3/"/>
    <id>https://cocosgames.com/2024/12/21/HaxeVsAS3/</id>
    <published>2024-12-21T04:10:38.941Z</published>
    <updated>2024-12-21T04:16:29.609Z</updated>
    
    <content type="html"><![CDATA[<p>Since the Haxe programming language originated from an ActionScript 2.0 compiler, there are many similarities between the languages. In fact, a number of the minor differences between ActionScript 3.0 and Haxe can be explained if you understand this heritage.</p><p>However, as you look deeper, you will find that Haxe is a modern, strictly-typed language that takes inspiration from many of the best parts of ActionScript while adding many new and valuable features.</p><a id="more"></a><h2 id="Basic-Types"><a href="#Basic-Types" class="headerlink" title="Basic Types"></a>Basic Types</h2><h3 id="ActionScript-3"><a href="#ActionScript-3" class="headerlink" title="ActionScript 3"></a>ActionScript 3</h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Boolean</span><br><span class="line">int</span><br><span class="line">Number</span><br><span class="line">Object</span><br><span class="line"><span class="keyword">void</span></span><br><span class="line">Array</span><br><span class="line">Vector.&lt;String&gt;</span><br></pre></td></tr></table></figure><h3 id="Haxe"><a href="#Haxe" class="headerlink" title="Haxe"></a>Haxe</h3><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Bool</span></span><br><span class="line"><span class="keyword">Int</span></span><br><span class="line"><span class="keyword">Float</span></span><br><span class="line"><span class="keyword">Dynamic</span></span><br><span class="line"><span class="keyword">Void</span></span><br><span class="line"><span class="keyword">Array</span>&lt;<span class="keyword">Dynamic</span>&gt;</span><br><span class="line"><span class="keyword">Array</span>&lt;<span class="keyword">String</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="Package-Declarations"><a href="#Package-Declarations" class="headerlink" title="Package Declarations"></a>Package Declarations</h2><h3 id="ActionScript-3-1"><a href="#ActionScript-3-1" class="headerlink" title="ActionScript 3"></a>ActionScript 3</h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="title class_">com.example.myapplication</span> &#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Haxe-1"><a href="#Haxe-1" class="headerlink" title="Haxe"></a>Haxe</h3><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.myapplication;</span><br></pre></td></tr></table></figure><h2 id="Defining-a-Class"><a href="#Defining-a-Class" class="headerlink" title="Defining a Class"></a>Defining a Class</h2><h3 id="ActionScript-3-2"><a href="#ActionScript-3-2" class="headerlink" title="ActionScript 3"></a>ActionScript 3</h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">function</span> <span class="title function_">MyClass</span> <span class="params">()</span> &#123;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Haxe-2"><a href="#Haxe-2" class="headerlink" title="Haxe"></a>Haxe</h3><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">new</span> </span>() &#123;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Loops"><a href="#Loops" class="headerlink" title="Loops"></a>Loops</h2><h3 id="ActionScript-3-3"><a href="#ActionScript-3-3" class="headerlink" title="ActionScript 3"></a>ActionScript 3</h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i:uint = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> <span class="keyword">each</span> (<span class="keyword">var</span> value:String <span class="keyword">in</span> items) &#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> propertyName:String <span class="keyword">in</span> object) &#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Haxe-3"><a href="#Haxe-3" class="headerlink" title="Haxe"></a>Haxe</h3><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0.</span>.<span class="number">.100</span>) &#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> (value <span class="keyword">in</span> items) &#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> fields = Reflect.fields (object);</span><br><span class="line"><span class="keyword">for</span> (propertyName <span class="keyword">in</span> fields) &#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Switch-Statements"><a href="#Switch-Statements" class="headerlink" title="Switch Statements"></a>Switch Statements</h2><h3 id="ActionScript-3-4"><a href="#ActionScript-3-4" class="headerlink" title="ActionScript 3"></a>ActionScript 3</h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (value) &#123;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">      trace (<span class="string">&quot;Equal to 1&quot;</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">default</span>:</span><br><span class="line">      trace (<span class="string">&quot;Not equal to 1&quot;</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Haxe-4"><a href="#Haxe-4" class="headerlink" title="Haxe"></a>Haxe</h3><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (value) &#123;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">case</span> <span class="number">1</span>:<span class="type"></span></span><br><span class="line">      <span class="built_in">trace</span> (<span class="string">&quot;Equal to 1&quot;</span>);</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">default</span>:<span class="type"></span></span><br><span class="line">      <span class="built_in">trace</span> (<span class="string">&quot;Not equal to 1&quot;</span>);</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Type-Inference"><a href="#Type-Inference" class="headerlink" title="Type Inference"></a>Type Inference</h2><h3 id="ActionScript-3-5"><a href="#ActionScript-3-5" class="headerlink" title="ActionScript 3"></a>ActionScript 3</h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> hi = <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// type is Object</span></span><br><span class="line"><span class="comment">// fails to compile in strict mode</span></span><br></pre></td></tr></table></figure><h3 id="Haxe-5"><a href="#Haxe-5" class="headerlink" title="Haxe"></a>Haxe</h3><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> hi = <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// type is String</span></span><br><span class="line"><span class="comment">// even works for code completion</span></span><br></pre></td></tr></table></figure><h2 id="Type-Casting"><a href="#Type-Casting" class="headerlink" title="Type Casting"></a>Type Casting</h2><h3 id="ActionScript-3-6"><a href="#ActionScript-3-6" class="headerlink" title="ActionScript 3"></a>ActionScript 3</h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> car:Car = vehicle <span class="keyword">as</span> Car;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> toString:String = String (<span class="number">10</span>);</span><br><span class="line"><span class="keyword">var</span> toNumber:Number = Number (<span class="string">&quot;10&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> toInteger:int = int (<span class="number">10.1</span>);</span><br></pre></td></tr></table></figure><h3 id="Haxe-6"><a href="#Haxe-6" class="headerlink" title="Haxe"></a>Haxe</h3><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> car:<span class="type">Car </span>= <span class="keyword">cast</span> vehicle;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// or for a safe cast:</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> car = <span class="keyword">cast</span> (vehicle, Car);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> toString = Std.string (<span class="number">10</span>);</span><br><span class="line"><span class="keyword">var</span> toNumber = Std.parseFloat (<span class="string">&quot;10&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> toInteger = Std.int (<span class="number">10.1</span>);</span><br></pre></td></tr></table></figure><h2 id="Type-Details"><a href="#Type-Details" class="headerlink" title="Type Details"></a>Type Details</h2><h3 id="ActionScript-3-7"><a href="#ActionScript-3-7" class="headerlink" title="ActionScript 3"></a>ActionScript 3</h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (vehicle <span class="keyword">is</span> Car) &#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta"><span class="keyword">import</span> flash.utils.getDefinitionByName;</span></span><br><span class="line"><span class="meta"><span class="keyword">import</span> flash.utils.getQualifiedClassName;</span></span><br><span class="line"> </span><br><span class="line">name = getQualifiedClassName (vehicle);</span><br><span class="line">type = Class (getDefinitionByName (name);</span><br></pre></td></tr></table></figure><h3 id="Haxe-7"><a href="#Haxe-7" class="headerlink" title="Haxe"></a>Haxe</h3><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (Std.is (vehicle, Car)) &#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">type = Type.getClass (vehicle);</span><br><span class="line">name = Type.getClassName (type);</span><br></pre></td></tr></table></figure><h2 id="Checking-for-Null"><a href="#Checking-for-Null" class="headerlink" title="Checking for Null"></a>Checking for Null</h2><h3 id="ActionScript-3-8"><a href="#ActionScript-3-8" class="headerlink" title="ActionScript 3"></a>ActionScript 3</h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (object == <span class="literal">null</span>) &#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> (!object) &#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Haxe-8"><a href="#Haxe-8" class="headerlink" title="Haxe"></a>Haxe</h3><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (object == <span class="literal">null</span>) &#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Hash-Tables"><a href="#Hash-Tables" class="headerlink" title="Hash Tables"></a>Hash Tables</h2><h3 id="ActionScript-3-9"><a href="#ActionScript-3-9" class="headerlink" title="ActionScript 3"></a>ActionScript 3</h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> table:Object = <span class="keyword">new</span> Object ();</span><br><span class="line">table[<span class="string">&quot;key&quot;</span>] = <span class="number">100</span>;</span><br><span class="line"> </span><br><span class="line">trace (table.hasOwnProperty (<span class="string">&quot;key&quot;</span>));</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key:Object <span class="keyword">in</span> table) &#123;</span><br><span class="line"> </span><br><span class="line">   trace (key + <span class="string">&quot; = &quot;</span> + table[key]);</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">delete</span> table[<span class="string">&quot;key&quot;</span>];</span><br></pre></td></tr></table></figure><h3 id="Haxe-9"><a href="#Haxe-9" class="headerlink" title="Haxe"></a>Haxe</h3><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> table = <span class="keyword">new</span> <span class="type">Map</span>&lt;<span class="keyword">String</span>,<span class="keyword">Int</span>&gt; ();</span><br><span class="line">table.<span class="keyword">set</span> (<span class="string">&quot;key&quot;</span>, <span class="number">100</span>);</span><br><span class="line"> </span><br><span class="line"><span class="built_in">trace</span> (table.exists (<span class="string">&quot;key&quot;</span>));</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> (key <span class="keyword">in</span> table.keys ()) &#123;</span><br><span class="line"> </span><br><span class="line">   <span class="built_in">trace</span> (key + <span class="string">&quot; = &quot;</span> + table.<span class="keyword">get</span> (key));</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">table.remove (<span class="string">&quot;key&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="Rest-Parameters"><a href="#Rest-Parameters" class="headerlink" title="Rest Parameters"></a>Rest Parameters</h2><h3 id="ActionScript-3-10"><a href="#ActionScript-3-10" class="headerlink" title="ActionScript 3"></a>ActionScript 3</h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span> <span class="params">(<span class="rest_arg">...params</span>)</span>:void &#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">test (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><h3 id="Haxe-10"><a href="#Haxe-10" class="headerlink" title="Haxe"></a>Haxe</h3><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span> </span>(params:<span class="type">Array</span>&lt;<span class="keyword">Dynamic</span>&gt;) &#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">Reflect.makeVarArgs (test) (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><h2 id="Reflection"><a href="#Reflection" class="headerlink" title="Reflection"></a>Reflection</h2><h3 id="ActionScript-3-11"><a href="#ActionScript-3-11" class="headerlink" title="ActionScript 3"></a>ActionScript 3</h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = object[<span class="string">&quot;foo&quot;</span>];</span><br><span class="line"> </span><br><span class="line">bar.apply (<span class="keyword">this</span>, [ <span class="string">&quot;hi&quot;</span> ]);</span><br></pre></td></tr></table></figure><h3 id="Haxe-11"><a href="#Haxe-11" class="headerlink" title="Haxe"></a>Haxe</h3><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = Reflect.field (object, <span class="string">&quot;foo&quot;</span>);</span><br><span class="line"> </span><br><span class="line">Reflect.callMethod (<span class="built_in">this</span>, bar, [ <span class="string">&quot;hi&quot;</span> ]);</span><br></pre></td></tr></table></figure><h2 id="Constants"><a href="#Constants" class="headerlink" title="Constants"></a>Constants</h2><h3 id="ActionScript-3-12"><a href="#ActionScript-3-12" class="headerlink" title="ActionScript 3"></a>ActionScript 3</h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">const</span> gravity:Number = <span class="number">9.8</span>;</span><br></pre></td></tr></table></figure><h3 id="Haxe-12"><a href="#Haxe-12" class="headerlink" title="Haxe"></a>Haxe</h3><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">inline</span> <span class="keyword">static</span> <span class="keyword">var</span> gravity = <span class="number">9.8</span>;</span><br></pre></td></tr></table></figure><h2 id="Function-Types"><a href="#Function-Types" class="headerlink" title="Function Types"></a>Function Types</h2><h3 id="ActionScript-3-13"><a href="#ActionScript-3-13" class="headerlink" title="ActionScript 3"></a>ActionScript 3</h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hello</span> <span class="params">(msg:String)</span>:void &#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> type:Function = hello;</span><br></pre></td></tr></table></figure><h3 id="Haxe-13"><a href="#Haxe-13" class="headerlink" title="Haxe"></a>Haxe</h3><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span> </span>(msg:<span class="type">String</span>):<span class="type">Void </span>&#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> type:<span class="type">String-&gt;Void </span>= hello;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// can also use Dynamic</span></span><br></pre></td></tr></table></figure><h2 id="Getters-and-Setters"><a href="#Getters-and-Setters" class="headerlink" title="Getters and Setters"></a>Getters and Setters</h2><h3 id="ActionScript-3-14"><a href="#ActionScript-3-14" class="headerlink" title="ActionScript 3"></a>ActionScript 3</h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">get</span> <span class="title function_">x</span> <span class="params">()</span>:Number &#123;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">return</span> _x;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">set</span> <span class="title function_">x</span> <span class="params">(value:Number)</span>:void &#123;</span><br><span class="line"> </span><br><span class="line">   _x = value;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Haxe-14"><a href="#Haxe-14" class="headerlink" title="Haxe"></a>Haxe</h3><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">var</span> x (<span class="keyword">get</span>, <span class="keyword">set</span>):<span class="type">Float</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_x</span> </span>():<span class="type">Float </span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">return</span> _x;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">set_x</span> </span>(value:<span class="type">Float</span>):<span class="type">Float </span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">return</span> _x = value;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Read-Only-Properties"><a href="#Read-Only-Properties" class="headerlink" title="Read-Only Properties"></a>Read-Only Properties</h2><h3 id="ActionScript-3-15"><a href="#ActionScript-3-15" class="headerlink" title="ActionScript 3"></a>ActionScript 3</h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">get</span> <span class="title function_">x</span> <span class="params">()</span>:Float &#123;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">return</span> _x;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Haxe-15"><a href="#Haxe-15" class="headerlink" title="Haxe"></a>Haxe</h3><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">var</span> x (<span class="keyword">default</span>, <span class="literal">null</span>):<span class="type">Float</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// null allows private access</span></span><br><span class="line"><span class="comment">// `never` would restrict all access</span></span><br></pre></td></tr></table></figure><h2 id="Missing-Features"><a href="#Missing-Features" class="headerlink" title="Missing Features"></a>Missing Features</h2><p>Haxe does not currently support custom namespaces, and methods do not provide an arguments property.</p><h2 id="Additional-Features"><a href="#Additional-Features" class="headerlink" title="Additional Features"></a>Additional Features</h2><p>In addition to most of the features of Actionscript 3, Haxe includes support for <a href="http://haxe.org/ref/enums">enums</a>, type parameters (generics), structures, typedefs, custom iterators, conditional compilation, inlining and more.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Since the Haxe programming language originated from an ActionScript 2.0 compiler, there are many similarities between the languages. In fact, a number of the minor differences between ActionScript 3.0 and Haxe can be explained if you understand this heritage.&lt;/p&gt;
&lt;p&gt;However, as you look deeper, you will find that Haxe is a modern, strictly-typed language that takes inspiration from many of the best parts of ActionScript while adding many new and valuable features.&lt;/p&gt;</summary>
    
    
    
    
    <category term="blog" scheme="https://cocosgames.com/tags/blog/"/>
    
    <category term="game" scheme="https://cocosgames.com/tags/game/"/>
    
  </entry>
  
  <entry>
    <title>Colyseus Cloud 上线</title>
    <link href="https://cocosgames.com/2024/09/21/colyseus_cloud/"/>
    <id>https://cocosgames.com/2024/09/21/colyseus_cloud/</id>
    <published>2024-09-21T09:36:20.837Z</published>
    <updated>2024-09-21T09:39:26.806Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://cloud-prod.colyseus.io/">https://cloud-prod.colyseus.io/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://cloud-prod.colyseus.io/&quot;&gt;https://cloud-prod.colyseus.io/&lt;/a&gt;&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="blog" scheme="https://cocosgames.com/tags/blog/"/>
    
    <category term="game" scheme="https://cocosgames.com/tags/game/"/>
    
  </entry>
  
  <entry>
    <title>Learn c# 中文版</title>
    <link href="https://cocosgames.com/2023/05/07/learning_csharp/"/>
    <id>https://cocosgames.com/2023/05/07/learning_csharp/</id>
    <published>2023-05-07T12:56:52.939Z</published>
    <updated>2024-09-21T09:46:50.921Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Learn-c-中文版"><a href="#Learn-c-中文版" class="headerlink" title="Learn c# 中文版"></a>Learn c# 中文版</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 单行注释以 // 开始</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">多行注释是这样的</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> XML文档注释</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明应用用到的命名空间</span></span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Data.Entity;</span><br><span class="line"><span class="keyword">using</span> System.Dynamic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Linq.Expressions;</span><br><span class="line"><span class="keyword">using</span> System.Net;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义作用域，将代码组织成包</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Learning</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 每个 .cs 文件至少需要包含一个和文件名相同的类</span></span><br><span class="line">    <span class="comment">// 你可以不这么干，但是这样不好。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">LearnCSharp</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 基本语法 -  如果你以前用过 Java 或 C++ 的话，可以直接跳到后文「有趣的特性」</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Syntax</span>()</span> </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 使用 Console.WriteLine 打印信息</span></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">            Console.WriteLine(</span><br><span class="line">                <span class="string">&quot;Integer: &quot;</span> + <span class="number">10</span> +</span><br><span class="line">                <span class="string">&quot; Double: &quot;</span> + <span class="number">3.14</span> +</span><br><span class="line">                <span class="string">&quot; Boolean: &quot;</span> + <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 使用 Console.Write 打印，不带换行符号</span></span><br><span class="line">            Console.Write(<span class="string">&quot;Hello &quot;</span>);</span><br><span class="line">            Console.Write(<span class="string">&quot;World&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment"><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span></span></span><br><span class="line">            <span class="comment">// 类型和变量</span></span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">            <span class="comment">// 使用 &lt;type&gt; &lt;name&gt; 定义变量</span></span><br><span class="line">            <span class="comment"><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span></span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// Sbyte - 有符号 8-bit 整数</span></span><br><span class="line">            <span class="comment">// (-128 &lt;= sbyte &lt;= 127)</span></span><br><span class="line">            <span class="built_in">sbyte</span> fooSbyte = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Byte - 无符号 8-bit 整数</span></span><br><span class="line">            <span class="comment">// (0 &lt;= byte &lt;= 255)</span></span><br><span class="line">            <span class="built_in">byte</span> fooByte = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Short - 16-bit 整数</span></span><br><span class="line">            <span class="comment">// 有符号 - (-32,768 &lt;= short &lt;= 32,767)</span></span><br><span class="line">            <span class="comment">// 无符号 - (0 &lt;= ushort &lt;= 65,535)</span></span><br><span class="line">            <span class="built_in">short</span> fooShort = <span class="number">10000</span>;</span><br><span class="line">            <span class="built_in">ushort</span> fooUshort = <span class="number">10000</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Integer - 32-bit 整数</span></span><br><span class="line">            <span class="built_in">int</span> fooInt = <span class="number">1</span>; <span class="comment">// (-2,147,483,648 &lt;= int &lt;= 2,147,483,647)</span></span><br><span class="line">            <span class="built_in">uint</span> fooUint = <span class="number">1</span>; <span class="comment">// (0 &lt;= uint &lt;= 4,294,967,295)</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// Long - 64-bit 整数</span></span><br><span class="line">            <span class="built_in">long</span> fooLong = <span class="number">100000L</span>; <span class="comment">// (-9,223,372,036,854,775,808 &lt;= long &lt;= 9,223,372,036,854,775,807)</span></span><br><span class="line">            <span class="built_in">ulong</span> fooUlong = <span class="number">100000L</span>; <span class="comment">// (0 &lt;= ulong &lt;= 18,446,744,073,709,551,615)</span></span><br><span class="line">            <span class="comment">// 数字默认为 int 或 uint （取决于尺寸）</span></span><br><span class="line">            <span class="comment">// 使用 L 标明变量值类型为long 或 ulong</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// Double - 双精度 64-bit IEEE 754 浮点数</span></span><br><span class="line">            <span class="built_in">double</span> fooDouble = <span class="number">123.4</span>; <span class="comment">// 精度: 15-16 位</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// Float - 单精度 32-bit IEEE 754 浮点数</span></span><br><span class="line">            <span class="built_in">float</span> fooFloat = <span class="number">234.5f</span>; <span class="comment">// 精度: 7 位</span></span><br><span class="line">            <span class="comment">// 使用 f 标明变量值类型为float</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// Decimal - 128-bits 数据类型，比其他浮点类型精度更高</span></span><br><span class="line">            <span class="comment">// 适合财务、金融</span></span><br><span class="line">            <span class="built_in">decimal</span> fooDecimal = <span class="number">150.3</span>m;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 布尔值 - true &amp; false</span></span><br><span class="line">            <span class="built_in">bool</span> fooBoolean = <span class="literal">true</span>; <span class="comment">// 或 false</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// Char - 单个 16-bit Unicode 字符</span></span><br><span class="line">            <span class="built_in">char</span> fooChar = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 字符串 -- 和前面的基本类型不同，字符串不是值，而是引用。</span></span><br><span class="line">            <span class="comment">// 这意味着你可以将字符串设为null。</span></span><br><span class="line">            <span class="built_in">string</span> fooString = <span class="string">&quot;\&quot;escape\&quot; quotes and add \n (new lines) and \t (tabs)&quot;</span>;</span><br><span class="line">            Console.WriteLine(fooString);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 你可以通过索引访问字符串的每个字符：</span></span><br><span class="line">            <span class="built_in">char</span> charFromString = fooString[<span class="number">1</span>]; <span class="comment">// =&gt; &#x27;e&#x27;</span></span><br><span class="line">            <span class="comment">// 字符串不可修改:  fooString[1] = &#x27;X&#x27; 是行不通的;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 根据当前的locale设定比较字符串，大小写不敏感</span></span><br><span class="line">            <span class="built_in">string</span>.Compare(fooString, <span class="string">&quot;x&quot;</span>, StringComparison.CurrentCultureIgnoreCase);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 基于sprintf的字符串格式化</span></span><br><span class="line">            <span class="built_in">string</span> fooFs = <span class="built_in">string</span>.Format(<span class="string">&quot;Check Check, &#123;0&#125; &#123;1&#125;, &#123;0&#125; &#123;1:0.0&#125;&quot;</span>, <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 日期和格式</span></span><br><span class="line">            DateTime fooDate = DateTime.Now;</span><br><span class="line">            Console.WriteLine(fooDate.ToString(<span class="string">&quot;hh:mm, dd MMM yyyy&quot;</span>));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 使用 @  符号可以创建跨行的字符串。使用 &quot;&quot; 来表示 &quot;</span></span><br><span class="line">            <span class="built_in">string</span> bazString = <span class="string">@&quot;Here&#x27;s some stuff</span></span><br><span class="line"><span class="string">on a new line! &quot;&quot;Wow!&quot;&quot;, the masses cried&quot;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 使用const或read-only定义常量</span></span><br><span class="line">            <span class="comment">// 常量在编译期演算</span></span><br><span class="line">            <span class="keyword">const</span> <span class="built_in">int</span> HOURS_I_WORK_PER_WEEK = <span class="number">9001</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment"><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span></span></span><br><span class="line">            <span class="comment">// 数据结构</span></span><br><span class="line">            <span class="comment"><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span></span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 数组 - 从0开始计数</span></span><br><span class="line">            <span class="comment">// 声明数组时需要确定数组长度</span></span><br><span class="line">            <span class="comment">// 声明数组的格式如下：</span></span><br><span class="line">            <span class="comment">// &lt;datatype&gt;[] &lt;var name&gt; = new &lt;datatype&gt;[&lt;array size&gt;];</span></span><br><span class="line">            <span class="built_in">int</span>[] intArray = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 声明并初始化数组的其他方式：</span></span><br><span class="line">            <span class="built_in">int</span>[] y = &#123; <span class="number">9000</span>, <span class="number">1000</span>, <span class="number">1337</span> &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 访问数组的元素</span></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;intArray @ 0: &quot;</span> + intArray[<span class="number">0</span>]);</span><br><span class="line">            <span class="comment">// 数组可以修改</span></span><br><span class="line">            intArray[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 列表</span></span><br><span class="line">            <span class="comment">// 列表比数组更常用，因为列表更灵活。</span></span><br><span class="line">            <span class="comment">// 声明列表的格式如下：</span></span><br><span class="line">            <span class="comment">// List&lt;datatype&gt; &lt;var name&gt; = new List&lt;datatype&gt;();</span></span><br><span class="line">            List&lt;<span class="built_in">int</span>&gt; intList = <span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt;();</span><br><span class="line">            List&lt;<span class="built_in">string</span>&gt; stringList = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">            List&lt;<span class="built_in">int</span>&gt; z = <span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt; &#123; <span class="number">9000</span>, <span class="number">1000</span>, <span class="number">1337</span> &#125;; <span class="comment">// i</span></span><br><span class="line">            <span class="comment">// &lt;&gt;用于泛型 - 参考下文</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 列表无默认值</span></span><br><span class="line">            <span class="comment">// 访问列表元素时必须首先添加元素</span></span><br><span class="line">            intList.Add(<span class="number">1</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;intList @ 0: &quot;</span> + intList[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 其他数据结构：</span></span><br><span class="line">            <span class="comment">// 堆栈/队列</span></span><br><span class="line">            <span class="comment">// 字典 (哈希表的实现)</span></span><br><span class="line">            <span class="comment">// 哈希集合</span></span><br><span class="line">            <span class="comment">// 只读集合</span></span><br><span class="line">            <span class="comment">// 元组 (.Net 4+)</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span></span></span><br><span class="line">            <span class="comment">// 操作符</span></span><br><span class="line">            <span class="comment"><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span></span></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;\n-&gt;Operators&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="built_in">int</span> i1 = <span class="number">1</span>, i2 = <span class="number">2</span>; <span class="comment">// 多重声明的简写形式</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 算术直截了当</span></span><br><span class="line">            Console.WriteLine(i1 + i2 - i1 * <span class="number">3</span> / <span class="number">7</span>); <span class="comment">// =&gt; 3</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 取余</span></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;11%3 = &quot;</span> + (<span class="number">11</span> % <span class="number">3</span>)); <span class="comment">// =&gt; 2</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 比较操作符</span></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;3 == 2? &quot;</span> + (<span class="number">3</span> == <span class="number">2</span>)); <span class="comment">// =&gt; false</span></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;3 != 2? &quot;</span> + (<span class="number">3</span> != <span class="number">2</span>)); <span class="comment">// =&gt; true</span></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;3 &gt; 2? &quot;</span> + (<span class="number">3</span> &gt; <span class="number">2</span>)); <span class="comment">// =&gt; true</span></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;3 &lt; 2? &quot;</span> + (<span class="number">3</span> &lt; <span class="number">2</span>)); <span class="comment">// =&gt; false</span></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;2 &lt;= 2? &quot;</span> + (<span class="number">2</span> &lt;= <span class="number">2</span>)); <span class="comment">// =&gt; true</span></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;2 &gt;= 2? &quot;</span> + (<span class="number">2</span> &gt;= <span class="number">2</span>)); <span class="comment">// =&gt; true</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 位操作符</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            ~       取反</span></span><br><span class="line"><span class="comment">            &lt;&lt;      左移（有符号）</span></span><br><span class="line"><span class="comment">            &gt;&gt;      右移（有符号）</span></span><br><span class="line"><span class="comment">            &amp;       与</span></span><br><span class="line"><span class="comment">            ^       异或</span></span><br><span class="line"><span class="comment">            |       或</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 自增、自减</span></span><br><span class="line">            <span class="built_in">int</span> i = <span class="number">0</span>;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;\n-&gt;Inc/Dec-rementation&quot;</span>);</span><br><span class="line">            Console.WriteLine(i++); <span class="comment">//i = 1. 事后自增</span></span><br><span class="line">            Console.WriteLine(++i); <span class="comment">//i = 2. 事先自增</span></span><br><span class="line">            Console.WriteLine(i--); <span class="comment">//i = 1. 事后自减</span></span><br><span class="line">            Console.WriteLine(--i); <span class="comment">//i = 0. 事先自减</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span></span></span><br><span class="line">            <span class="comment">// 控制结构</span></span><br><span class="line">            <span class="comment"><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span></span></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;\n-&gt;Control Structures&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 类似C的if语句</span></span><br><span class="line">            <span class="built_in">int</span> j = <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">if</span> (j == <span class="number">10</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;I get printed&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (j &gt; <span class="number">10</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;I don&#x27;t&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;I also don&#x27;t&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 三元表达式</span></span><br><span class="line">            <span class="comment">// 简单的 if/else 语句可以写成：</span></span><br><span class="line">            <span class="comment">// &lt;条件&gt; ? &lt;真&gt; : &lt;假&gt;</span></span><br><span class="line">            <span class="built_in">int</span> toCompare = <span class="number">17</span>;</span><br><span class="line">            <span class="built_in">string</span> isTrue = toCompare == <span class="number">17</span> ? <span class="string">&quot;True&quot;</span> : <span class="string">&quot;False&quot;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// While 循环</span></span><br><span class="line">            <span class="built_in">int</span> fooWhile = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (fooWhile &lt; <span class="number">100</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//迭代 100 次, fooWhile 0-&gt;99</span></span><br><span class="line">                fooWhile++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Do While 循环</span></span><br><span class="line">            <span class="built_in">int</span> fooDoWhile = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">do</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//迭代 100 次, fooDoWhile 0-&gt;99</span></span><br><span class="line">                fooDoWhile++;</span><br><span class="line">            &#125; <span class="keyword">while</span> (fooDoWhile &lt; <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//for 循环结构 =&gt; for(&lt;初始条件&gt;; &lt;条件&gt;; &lt;步&gt;)</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> fooFor = <span class="number">0</span>; fooFor &lt; <span class="number">10</span>; fooFor++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//迭代10次, fooFor 0-&gt;9</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// foreach循环</span></span><br><span class="line">            <span class="comment">// foreach 循环结构 =&gt; foreach(&lt;迭代器类型&gt; &lt;迭代器&gt; in &lt;可枚举结构&gt;)</span></span><br><span class="line">            <span class="comment">// foreach 循环适用于任何实现了 IEnumerable 或 IEnumerable&lt;T&gt; 的对象。</span></span><br><span class="line">            <span class="comment">// .Net 框架下的集合类型(数组, 列表, 字典...)</span></span><br><span class="line">            <span class="comment">// 都实现了这些接口</span></span><br><span class="line">            <span class="comment">// (下面的代码中，ToCharArray()可以删除，因为字符串同样实现了IEnumerable)</span></span><br><span class="line">            <span class="keyword">foreach</span> (<span class="built_in">char</span> character <span class="keyword">in</span> <span class="string">&quot;Hello World&quot;</span>.ToCharArray())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//迭代字符串中的所有字符</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Switch 语句</span></span><br><span class="line">            <span class="comment">// switch 适用于 byte、short、char和int 数据类型。</span></span><br><span class="line">            <span class="comment">// 同样适用于可枚举的类型</span></span><br><span class="line">            <span class="comment">// 包括字符串类, 以及一些封装了原始值的类：</span></span><br><span class="line">            <span class="comment">// Character、Byte、Short和Integer。</span></span><br><span class="line">            <span class="built_in">int</span> month = <span class="number">3</span>;</span><br><span class="line">            <span class="built_in">string</span> monthString;</span><br><span class="line">            <span class="keyword">switch</span> (month)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    monthString = <span class="string">&quot;January&quot;</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    monthString = <span class="string">&quot;February&quot;</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                    monthString = <span class="string">&quot;March&quot;</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="comment">// 你可以一次匹配多个case语句</span></span><br><span class="line">                <span class="comment">// 但是你在添加case语句后需要使用break</span></span><br><span class="line">                <span class="comment">// （否则你需要显式地使用goto case x语句）</span></span><br><span class="line">                <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">                    monthString = <span class="string">&quot;Summer time!!&quot;</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="literal">default</span>:</span><br><span class="line">                    monthString = <span class="string">&quot;Some other month&quot;</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment"><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span></span></span><br><span class="line">            <span class="comment">// 转换、指定数据类型</span></span><br><span class="line">            <span class="comment"><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span></span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 转换类型</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 转换字符串为整数</span></span><br><span class="line">            <span class="comment">// 转换失败会抛出异常</span></span><br><span class="line">            <span class="built_in">int</span>.Parse(<span class="string">&quot;123&quot;</span>);<span class="comment">//返回整数类型的&quot;123&quot;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// TryParse会尝试转换类型，失败时会返回缺省类型</span></span><br><span class="line">            <span class="comment">// 例如 0</span></span><br><span class="line">            <span class="built_in">int</span> tryInt;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">int</span>.TryParse(<span class="string">&quot;123&quot;</span>, <span class="keyword">out</span> tryInt)) <span class="comment">// Funciton is boolean</span></span><br><span class="line">                Console.WriteLine(tryInt);       <span class="comment">// 123</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 转换整数为字符串</span></span><br><span class="line">            <span class="comment">// Convert类提供了一系列便利转换的方法</span></span><br><span class="line">            Convert.ToString(<span class="number">123</span>);</span><br><span class="line">            <span class="comment">// or</span></span><br><span class="line">            tryInt.ToString();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span></span></span><br><span class="line">        <span class="comment">// 类</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Classes</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 参看文件尾部的对象声明</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 使用new初始化对象</span></span><br><span class="line">            Bicycle trek = <span class="keyword">new</span> Bicycle();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 调用对象的方法</span></span><br><span class="line">            trek.SpeedUp(<span class="number">3</span>); <span class="comment">// 你应该一直使用setter和getter方法</span></span><br><span class="line">            trek.Cadence = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 查看对象的信息.</span></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;trek info: &quot;</span> + trek.Info());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 实例化一个新的Penny Farthing</span></span><br><span class="line">            PennyFarthing funbike = <span class="keyword">new</span> PennyFarthing(<span class="number">1</span>, <span class="number">10</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;funbike info: &quot;</span> + funbike.Info());</span><br><span class="line"></span><br><span class="line">            Console.Read();</span><br><span class="line">        &#125; <span class="comment">// 结束main方法</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 终端程序 终端程序必须有一个main方法作为入口</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            OtherInterestingFeatures();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// 有趣的特性</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 默认方法签名</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="comment">// 可见性</span></span><br><span class="line">        <span class="keyword">static</span> <span class="comment">// 允许直接调用类，无需先创建实例</span></span><br><span class="line">        <span class="built_in">int</span>, <span class="comment">//返回值</span></span><br><span class="line">        MethodSignatures(</span><br><span class="line">            <span class="built_in">int</span> maxCount, <span class="comment">// 第一个变量，类型为整型</span></span><br><span class="line">            <span class="built_in">int</span> count = <span class="number">0</span>, <span class="comment">// 如果没有传入值，则缺省值为0</span></span><br><span class="line">            <span class="built_in">int</span> another = <span class="number">3</span>,</span><br><span class="line">            <span class="keyword">params</span> <span class="built_in">string</span>[] otherParams <span class="comment">// 捕获其他参数</span></span><br><span class="line">        )</span><br><span class="line">        &#123; </span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 方法可以重名，只要签名不一样</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">MethodSignature</span>(<span class="params"><span class="built_in">string</span> maxCount</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//泛型</span></span><br><span class="line">        <span class="comment">// TKey和TValue类由用用户调用函数时指定。</span></span><br><span class="line">        <span class="comment">// 以下函数模拟了Python的SetDefault</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TValue <span class="title">SetDefault</span>&lt;<span class="title">TKey</span>, <span class="title">TValue</span>&gt;(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">            IDictionary&lt;TKey, TValue&gt; dictionary, </span></span></span><br><span class="line"><span class="params"><span class="function">            TKey key, </span></span></span><br><span class="line"><span class="params"><span class="function">            TValue defaultItem</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            TValue result;</span><br><span class="line">            <span class="keyword">if</span> (!dictionary.TryGetValue(key, <span class="keyword">out</span> result))</span><br><span class="line">                <span class="keyword">return</span> dictionary[key] = defaultItem;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 你可以限定传入值的范围</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">IterateAndPrint</span>&lt;<span class="title">T</span>&gt;(<span class="params">T toPrint</span>) <span class="keyword">where</span> T: IEnumerable&lt;<span class="built_in">int</span>&gt;</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 我们可以进行迭代，因为T是可枚举的</span></span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> toPrint)</span><br><span class="line">                <span class="comment">// ittm为整数</span></span><br><span class="line">                Console.WriteLine(item.ToString());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">OtherInterestingFeatures</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 可选参数  </span></span><br><span class="line">            MethodSignatures(<span class="number">3</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="string">&quot;Some&quot;</span>, <span class="string">&quot;Extra&quot;</span>, <span class="string">&quot;Strings&quot;</span>);</span><br><span class="line">            MethodSignatures(<span class="number">3</span>, another: <span class="number">3</span>); <span class="comment">// 显式指定参数，忽略可选参数</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 扩展方法</span></span><br><span class="line">            <span class="built_in">int</span> i = <span class="number">3</span>;</span><br><span class="line">            i.Print(); <span class="comment">// 参见下面的定义 </span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 可为null的类型 对数据库交互、返回值很有用</span></span><br><span class="line">            <span class="comment">// 任何值类型 (i.e. 不为类) 添加后缀 ? 后会变为可为null的值</span></span><br><span class="line">            <span class="comment">// &lt;类型&gt;? &lt;变量名&gt; = &lt;值&gt;</span></span><br><span class="line">            <span class="built_in">int</span>? nullable = <span class="literal">null</span>; <span class="comment">// Nullable&lt;int&gt; 的简写形式</span></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Nullable variable: &quot;</span> + nullable);</span><br><span class="line">            <span class="built_in">bool</span> hasValue = nullable.HasValue; <span class="comment">// 不为null时返回真</span></span><br><span class="line">            <span class="comment">// ?? 是用于指定默认值的语法糖</span></span><br><span class="line">            <span class="comment">// 以防变量为null的情况</span></span><br><span class="line">            <span class="built_in">int</span> notNullable = nullable ?? <span class="number">0</span>; <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 变量类型推断 - 你可以让编译器推断变量类型:</span></span><br><span class="line">            <span class="keyword">var</span> magic = <span class="string">&quot;编译器确定magic是一个字符串，所以仍然是类型安全的&quot;</span>;</span><br><span class="line">            <span class="comment">// magic = 9; // 不工作，因为magic是字符串，而不是整数。 </span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 泛型</span></span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">            <span class="keyword">var</span> phonebook = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt;() &#123; </span><br><span class="line">                &#123;<span class="string">&quot;Sarah&quot;</span>, <span class="string">&quot;212 555 5555&quot;</span>&#125; <span class="comment">// 在电话簿中加入新条目</span></span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 调用上面定义为泛型的SETDEFAULT</span></span><br><span class="line">            Console.WriteLine(SetDefault&lt;<span class="built_in">string</span>,<span class="built_in">string</span>&gt;(phonebook, <span class="string">&quot;Shaun&quot;</span>, <span class="string">&quot;No Phone&quot;</span>)); <span class="comment">// 没有电话</span></span><br><span class="line">            <span class="comment">// 你不用指定TKey、TValue，因为它们会被隐式地推导出来</span></span><br><span class="line">            Console.WriteLine(SetDefault(phonebook, <span class="string">&quot;Sarah&quot;</span>, <span class="string">&quot;No Phone&quot;</span>)); <span class="comment">// 212 555 5555</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// lambda表达式 - 允许你用一行代码搞定函数</span></span><br><span class="line">            Func&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt; square = (x) =&gt; x * x; <span class="comment">// 最后一项为返回值</span></span><br><span class="line">            Console.WriteLine(square(<span class="number">3</span>)); <span class="comment">// 9</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 可抛弃的资源管理 - 让你很容易地处理未管理的资源</span></span><br><span class="line">            <span class="comment">// 大多数访问未管理资源 (文件操作符、设备上下文, etc.)的对象</span></span><br><span class="line">            <span class="comment">// 都实现了IDisposable接口。 </span></span><br><span class="line">            <span class="comment">// using语句会为你清理IDisposable对象。</span></span><br><span class="line">            <span class="keyword">using</span> (StreamWriter writer = <span class="keyword">new</span> StreamWriter(<span class="string">&quot;log.txt&quot;</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                writer.WriteLine(<span class="string">&quot;这里没有什么可疑的东西&quot;</span>);</span><br><span class="line">                <span class="comment">// 在作用域的结尾，资源会被回收</span></span><br><span class="line">                <span class="comment">// （即使有异常抛出，也一样会回收）</span></span><br><span class="line">            &#125; </span><br><span class="line"></span><br><span class="line">            <span class="comment">// 并行框架</span></span><br><span class="line">            <span class="comment">// http://blogs.msdn.com/b/csharpfaq/archive/2010/06/01/parallel-programming-in-net-framework-4-getting-started.aspx</span></span><br><span class="line">            <span class="keyword">var</span> websites = <span class="keyword">new</span> <span class="built_in">string</span>[] &#123; </span><br><span class="line">                <span class="string">&quot;http://www.google.com&quot;</span>, <span class="string">&quot;http://www.reddit.com&quot;</span>, </span><br><span class="line">                <span class="string">&quot;http://www.shaunmccarthy.com&quot;</span></span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">var</span> responses = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt;();</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 为每个请求新开一个线程</span></span><br><span class="line">            <span class="comment">// 在运行下一步前合并结果</span></span><br><span class="line">            Parallel.ForEach(websites, </span><br><span class="line">                <span class="keyword">new</span> ParallelOptions() &#123;MaxDegreeOfParallelism = <span class="number">3</span>&#125;, <span class="comment">// max of 3 threads</span></span><br><span class="line">                website =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// Do something that takes a long time on the file</span></span><br><span class="line">                <span class="keyword">using</span> (<span class="keyword">var</span> r = WebRequest.Create(<span class="keyword">new</span> Uri(website)).GetResponse())</span><br><span class="line">                &#123;</span><br><span class="line">                    responses[website] = r.ContentType;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 直到所有的请求完成后才会运行下面的代码</span></span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> key <span class="keyword">in</span> responses.Keys)</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;&#123;0&#125;:&#123;1&#125;&quot;</span>, key, responses[key]);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 动态对象（配合其他语言使用很方便）</span></span><br><span class="line">            <span class="built_in">dynamic</span> student = <span class="keyword">new</span> ExpandoObject();</span><br><span class="line">            student.FirstName = <span class="string">&quot;First Name&quot;</span>; <span class="comment">// 不需要先定义类！</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 你甚至可以添加方法（接受一个字符串，输出一个字符串）</span></span><br><span class="line">            student.Introduce = <span class="keyword">new</span> Func&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt;(</span><br><span class="line">                (introduceTo) =&gt; <span class="built_in">string</span>.Format(<span class="string">&quot;Hey &#123;0&#125;, this is &#123;1&#125;&quot;</span>, student.FirstName, introduceTo));</span><br><span class="line">            Console.WriteLine(student.Introduce(<span class="string">&quot;Beth&quot;</span>));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// IQUERYABLE&lt;T&gt; - 几乎所有的集合都实现了它，</span></span><br><span class="line">            <span class="comment">// 带给你 Map / Filter / Reduce 风格的方法</span></span><br><span class="line">            <span class="keyword">var</span> bikes = <span class="keyword">new</span> List&lt;Bicycle&gt;();</span><br><span class="line">            bikes.Sort(); <span class="comment">// Sorts the array</span></span><br><span class="line">            bikes.Sort((b1, b2) =&gt; b1.Wheels.CompareTo(b2.Wheels)); <span class="comment">// 根据车轮数排序</span></span><br><span class="line">            <span class="keyword">var</span> result = bikes</span><br><span class="line">                .Where(b =&gt; b.Wheels &gt; <span class="number">3</span>) <span class="comment">// 筛选 - 可以连锁使用 （返回IQueryable)</span></span><br><span class="line">                .Where(b =&gt; b.IsBroken &amp;&amp; b.HasTassles)</span><br><span class="line">                .Select(b =&gt; b.ToString()); <span class="comment">// Map - 这里我们使用了select，所以结果是IQueryable&lt;string&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> sum = bikes.Sum(b =&gt; b.Wheels); <span class="comment">// Reduce - 计算集合中的轮子总数</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建一个包含基于自行车的一些参数生成的隐式对象的列表</span></span><br><span class="line">            <span class="keyword">var</span> bikeSummaries = bikes.Select(b=&gt;<span class="keyword">new</span> &#123; Name = b.Name, IsAwesome = !b.IsBroken &amp;&amp; b.HasTassles &#125;);</span><br><span class="line">            <span class="comment">// 很难演示，但是编译器在代码编译完成前就能推导出以上对象的类型</span></span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> bikeSummary <span class="keyword">in</span> bikeSummaries.Where(b =&gt; b.IsAwesome))</span><br><span class="line">                Console.WriteLine(bikeSummary.Name);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// ASPARALLEL</span></span><br><span class="line">            <span class="comment">// 邪恶的特性 —— 组合了linq和并行操作</span></span><br><span class="line">            <span class="keyword">var</span> threeWheelers = bikes.AsParallel().Where(b =&gt; b.Wheels == <span class="number">3</span>).Select(b =&gt; b.Name);</span><br><span class="line">            <span class="comment">// 以上代码会并发地运行。会自动新开线程，分别计算结果。</span></span><br><span class="line">            <span class="comment">// 适用于多核、大数据量的场景。</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// LINQ - 将IQueryable&lt;T&gt;映射到存储，延缓执行</span></span><br><span class="line">            <span class="comment">// 例如 LinqToSql 映射数据库, LinqToXml 映射XML文档</span></span><br><span class="line">            <span class="keyword">var</span> db = <span class="keyword">new</span> BikeRespository();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 执行被延迟了，这对于查询数据库来说很好</span></span><br><span class="line">            <span class="keyword">var</span> filter = db.Bikes.Where(b =&gt; b.HasTassles); <span class="comment">// 不运行查询</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="number">42</span> &gt; <span class="number">6</span>) <span class="comment">// 你可以不断地增加筛选，包括有条件的筛选，例如用于“高级搜索”功能</span></span><br><span class="line">                filter = filter.Where(b =&gt; b.IsBroken); <span class="comment">// 不运行查询 </span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> query = filter</span><br><span class="line">                .OrderBy(b =&gt; b.Wheels)</span><br><span class="line">                .ThenBy(b =&gt; b.Name)</span><br><span class="line">                .Select(b =&gt; b.Name); <span class="comment">// 仍然不运行查询</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 现在运行查询，运行查询的时候会打开一个读取器，所以你迭代的是一个副本</span></span><br><span class="line">            <span class="keyword">foreach</span> (<span class="built_in">string</span> bike <span class="keyword">in</span> query) </span><br><span class="line">                Console.WriteLine(result);</span><br><span class="line">            </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="comment">// 结束LearnCSharp类</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 你可以在同一个 .cs 文件中包含其他类</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Extensions</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 扩展函数</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Print</span>(<span class="params"><span class="keyword">this</span> <span class="built_in">object</span> obj</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(obj.ToString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 声明类的语法：</span></span><br><span class="line">    <span class="comment">// &lt;public/private/protected/internal&gt; class &lt;类名&gt;&#123;</span></span><br><span class="line">    <span class="comment">//    //数据字段, 构造器, 内部函数.</span></span><br><span class="line">    /     <span class="comment">// 在Java中函数被称为方法。</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Bicycle</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 自行车的字段、变量</span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> Cadence <span class="comment">// Public: 任何地方都可以访问</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span> <span class="comment">// get - 定义获取属性的方法</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> _cadence;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">set</span> <span class="comment">// set - 定义设置属性的方法</span></span><br><span class="line">            &#123;</span><br><span class="line">                _cadence = <span class="keyword">value</span>; <span class="comment">// value是被传递给setter的值</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">int</span> _cadence;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">virtual</span> <span class="built_in">int</span> Gear <span class="comment">// 类和子类可以访问</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span>; <span class="comment">// 创建一个自动属性，无需成员字段</span></span><br><span class="line">            <span class="keyword">set</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">internal</span> <span class="built_in">int</span> Wheels <span class="comment">// Internal:在同一程序集内可以访问</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span>;</span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">set</span>; <span class="comment">// 可以给get/set方法添加修饰符</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">int</span> _speed; <span class="comment">// 默认为private: 只可以在这个类内访问，你也可以使用`private`关键词</span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// enum类型包含一组常量</span></span><br><span class="line">        <span class="comment">// 它将名称映射到值（除非特别说明，是一个整型）</span></span><br><span class="line">        <span class="comment">// enmu元素的类型可以是byte、sbyte、short、ushort、int、uint、long、ulong。</span></span><br><span class="line">        <span class="comment">// enum不能包含相同的值。</span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">enum</span> BikeBrand</span><br><span class="line">        &#123;</span><br><span class="line">            AIST,</span><br><span class="line">            BMC,</span><br><span class="line">            Electra = <span class="number">42</span>, <span class="comment">//你可以显式地赋值</span></span><br><span class="line">            Gitane <span class="comment">// 43</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 我们在Bicycle类中定义的这个类型，所以它是一个内嵌类型。</span></span><br><span class="line">        <span class="comment">// 这个类以外的代码应当使用`Bicycle.Brand`来引用。</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> BikeBrand Brand; <span class="comment">// 声明一个enum类型之后，我们可以声明这个类型的字段</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 静态方法的类型为自身，不属于特定的对象。</span></span><br><span class="line">        <span class="comment">// 你无需引用对象就可以访问他们。</span></span><br><span class="line">        <span class="comment">// Console.WriteLine(&quot;Bicycles created: &quot; + Bicycle.bicyclesCreated);</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">public</span> <span class="built_in">int</span> BicyclesCreated = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 只读值在运行时确定</span></span><br><span class="line">        <span class="comment">// 它们只能在声明或构造器内被赋值</span></span><br><span class="line">        <span class="keyword">readonly</span> <span class="built_in">bool</span> _hasCardsInSpokes = <span class="literal">false</span>; <span class="comment">// read-only private</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构造器是创建类的一种方式</span></span><br><span class="line">        <span class="comment">// 下面是一个默认的构造器</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Bicycle</span>()</span> </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.Gear = <span class="number">1</span>; <span class="comment">// 你可以使用关键词this访问对象的成员</span></span><br><span class="line">            Cadence = <span class="number">50</span>;  <span class="comment">// 不过你并不总是需要它</span></span><br><span class="line">            _speed = <span class="number">5</span>;</span><br><span class="line">            Name = <span class="string">&quot;Bontrager&quot;</span>;</span><br><span class="line">            Brand = BikeBrand.AIST;</span><br><span class="line">            BicyclesCreated++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 另一个构造器的例子（包含参数）</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Bicycle</span>(<span class="params"><span class="built_in">int</span> startCadence, <span class="built_in">int</span> startSpeed, <span class="built_in">int</span> startGear,</span></span></span><br><span class="line"><span class="params"><span class="function">                       <span class="built_in">string</span> name, <span class="built_in">bool</span> hasCardsInSpokes, BikeBrand brand</span>) </span></span><br><span class="line"><span class="function">            : <span class="title">base</span>() <span class="comment">// 首先调用base</span></span></span><br><span class="line">        &#123;</span><br><span class="line">            Gear = startGear; </span><br><span class="line">            Cadence = startCadence;</span><br><span class="line">            _speed = startSpeed;</span><br><span class="line">            Name = name; </span><br><span class="line">            _hasCardsInSpokes = hasCardsInSpokes;</span><br><span class="line">            Brand = brand;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构造器可以连锁使用</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Bicycle</span>(<span class="params"><span class="built_in">int</span> startCadence, <span class="built_in">int</span> startSpeed, BikeBrand brand</span>) :</span></span><br><span class="line"><span class="function">            <span class="title">this</span>(<span class="params">startCadence, startSpeed, <span class="number">0</span>, <span class="string">&quot;big wheels&quot;</span>, <span class="literal">true</span>, brand</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 函数语法</span></span><br><span class="line">        <span class="comment">// &lt;public/private/protected&gt; &lt;返回值&gt; &lt;函数名称&gt;(&lt;参数&gt;)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 类可以为字段实现 getters 和 setters 方法 for their fields</span></span><br><span class="line">        <span class="comment">// 或者可以实现属性（C#推荐使用这个）</span></span><br><span class="line">        <span class="comment">// 方法的参数可以有默认值</span></span><br><span class="line">        <span class="comment">// 在有默认值的情况下，调用方法的时候可以省略相应的参数</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SpeedUp</span>(<span class="params"><span class="built_in">int</span> increment = <span class="number">1</span></span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            _speed += increment;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SlowDown</span>(<span class="params"><span class="built_in">int</span> decrement = <span class="number">1</span></span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            _speed -= decrement;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 属性可以访问和设置值</span></span><br><span class="line">        <span class="comment">// 当只需要访问数据的时候，考虑使用属性。</span></span><br><span class="line">        <span class="comment">// 属性可以定义get和set，或者是同时定义两者</span></span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">bool</span> _hasTassles; <span class="comment">// private variable</span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">bool</span> HasTassles <span class="comment">// public accessor</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span> &#123; <span class="keyword">return</span> _hasTassles; &#125;</span><br><span class="line">            <span class="keyword">set</span> &#123; _hasTassles = <span class="keyword">value</span>; &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 你可以在一行之内定义自动属性</span></span><br><span class="line">        <span class="comment">// 这个语法会自动创建后备字段</span></span><br><span class="line">        <span class="comment">// 你可以给getter或setter设置访问修饰符</span></span><br><span class="line">        <span class="comment">// 以便限制它们的访问</span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">bool</span> IsBroken &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 属性的实现可以是自动的</span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> FrameSize</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span>;</span><br><span class="line">            <span class="comment">// 你可以给get或set指定访问修饰符</span></span><br><span class="line">            <span class="comment">// 以下代码意味着只有Bicycle类可以调用Framesize的set</span></span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">set</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//显示对象属性的方法</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="built_in">string</span> <span class="title">Info</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Gear: &quot;</span> + Gear +</span><br><span class="line">                    <span class="string">&quot; Cadence: &quot;</span> + Cadence +</span><br><span class="line">                    <span class="string">&quot; Speed: &quot;</span> + _speed +</span><br><span class="line">                    <span class="string">&quot; Name: &quot;</span> + Name +</span><br><span class="line">                    <span class="string">&quot; Cards in Spokes: &quot;</span> + (_hasCardsInSpokes ? <span class="string">&quot;yes&quot;</span> : <span class="string">&quot;no&quot;</span>) +</span><br><span class="line">                    <span class="string">&quot;\n------------------------------\n&quot;</span></span><br><span class="line">                    ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 方法可以是静态的。通常用于辅助方法。</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">DidWeCreateEnoughBycles</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 在静态方法中，你只能引用类的静态成员</span></span><br><span class="line">            <span class="keyword">return</span> BicyclesCreated &gt; <span class="number">9000</span>;</span><br><span class="line">        &#125; <span class="comment">// 如果你的类只需要静态成员，考虑将整个类作为静态类。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125; <span class="comment">//  Bicycle类结束</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// PennyFarthing是Bicycle的一个子类</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title">PennyFarthing</span> : <span class="title">Bicycle</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// (Penny Farthings是一种前轮很大的自行车。没有齿轮。）</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用父构造器</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">PennyFarthing</span>(<span class="params"><span class="built_in">int</span> startCadence, <span class="built_in">int</span> startSpeed</span>) :</span></span><br><span class="line"><span class="function">            <span class="title">base</span>(<span class="params">startCadence, startSpeed, <span class="number">0</span>, <span class="string">&quot;PennyFarthing&quot;</span>, <span class="literal">true</span>, BikeBrand.Electra</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">override</span> <span class="built_in">int</span> Gear</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">set</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentException(<span class="string">&quot;你不可能在PennyFarthing上切换齿轮&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> <span class="title">Info</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> result = <span class="string">&quot;PennyFarthing bicycle &quot;</span>;</span><br><span class="line">            result += <span class="keyword">base</span>.ToString(); <span class="comment">// 调用父方法</span></span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 接口只包含成员的签名，而没有实现。</span></span><br><span class="line">    <span class="keyword">interface</span> <span class="title">IJumpable</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Jump</span>(<span class="params"><span class="built_in">int</span> meters</span>)</span>; <span class="comment">// 所有接口成员是隐式地公开的</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">interface</span> <span class="title">IBreakable</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">bool</span> Broken &#123; <span class="keyword">get</span>; &#125; <span class="comment">// 接口可以包含属性、方法和事件</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 类只能继承一个类，但是可以实现任意数量的接口</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> damage = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Jump</span>(<span class="params"><span class="built_in">int</span> meters</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            damage += meters;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">bool</span> Broken</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> damage &gt; <span class="number">100</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 连接数据库，一个 LinqToSql的示例。</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> EntityFramework Code First 很棒 (类似 Ruby的 ActiveRecord, 不过是双向的)</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> http://msdn.microsoft.com/en-us/data/jj193542.aspx</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BikeRespository</span> : <span class="title">DbSet</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">BikeRespository</span>()</span></span><br><span class="line"><span class="function">            : <span class="title">base</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> DbSet&lt;Bicycle&gt; Bikes &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="comment">// 结束 Namespace</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Learn c# 中文版</summary>
    
    
    
    
    <category term="blog" scheme="https://cocosgames.com/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>Colyseus Arena 服务下线</title>
    <link href="https://cocosgames.com/2023/04/02/Arena_down/"/>
    <id>https://cocosgames.com/2023/04/02/Arena_down/</id>
    <published>2023-04-02T10:12:16.598Z</published>
    <updated>2023-04-02T10:18:11.476Z</updated>
    
    <content type="html"><![CDATA[<h3 id="悲报-Colyseus-Arena-服务下线"><a href="#悲报-Colyseus-Arena-服务下线" class="headerlink" title="悲报: Colyseus Arena 服务下线."></a>悲报: Colyseus Arena 服务下线.</h3><p>可能是受加密货币市值影响, Colyseus Arena 从2023年开始就在不断缩减业务.<br>现在 Colyseus Arena 官方终于宣布其服务整体下线. 这会让许多构建在其之上的游戏和应用受到影响.<br>虽然官方服务下线了, 但是 Colyseus 作为一个开源项目还是生机勃勃的, 至少目前来看是这样.<br>Colyseus 的作者也表示会继续维护下去.<br>我也会继续当它的社区管理员.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;悲报-Colyseus-Arena-服务下线&quot;&gt;&lt;a href=&quot;#悲报-Colyseus-Arena-服务下线&quot; class=&quot;headerlink&quot; title=&quot;悲报: Colyseus Arena 服务下线.&quot;&gt;&lt;/a&gt;悲报: Colyseus Arena</summary>
      
    
    
    
    
    <category term="blog" scheme="https://cocosgames.com/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>我的 Defold 游戏开发步骤</title>
    <link href="https://cocosgames.com/2023/03/22/Defold_Steps/"/>
    <id>https://cocosgames.com/2023/03/22/Defold_Steps/</id>
    <published>2023-03-22T11:17:16.457Z</published>
    <updated>2023-03-22T11:21:44.294Z</updated>
    
    <content type="html"><![CDATA[<ol><li>打开 Defold 新建项目</li><li>打开 VSCode 初始化项目</li><li>控制台 git lfs track raw/**</li><li>加入扩展插件</li><li>加入素材, 创建 collection</li><li>加入逻辑与控制代码并调试</li><li>github commit/push</li><li>重复 4~7</li><li>分辨率适配</li><li>成品发布</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;打开 Defold 新建项目&lt;/li&gt;
&lt;li&gt;打开 VSCode 初始化项目&lt;/li&gt;
&lt;li&gt;控制台 git lfs track raw/**&lt;/li&gt;
&lt;li&gt;加入扩展插件&lt;/li&gt;
&lt;li&gt;加入素材, 创建 collection&lt;/li&gt;
&lt;li&gt;加入逻</summary>
      
    
    
    
    
    <category term="blog" scheme="https://cocosgames.com/tags/blog/"/>
    
    <category term="game" scheme="https://cocosgames.com/tags/game/"/>
    
  </entry>
  
  <entry>
    <title>Learn Lua in 15 Minutes 中文版</title>
    <link href="https://cocosgames.com/2023/03/22/learning_lua_2/"/>
    <id>https://cocosgames.com/2023/03/22/learning_lua_2/</id>
    <published>2023-03-22T07:06:31.522Z</published>
    <updated>2023-03-22T07:12:17.234Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Learn-Lua-in-15-Minutes-by-Tyler-Neylon-中文版"><a href="#Learn-Lua-in-15-Minutes-by-Tyler-Neylon-中文版" class="headerlink" title="Learn Lua in 15 Minutes by Tyler Neylon 中文版"></a>Learn Lua in 15 Minutes by Tyler Neylon 中文版</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br></pre></td><td class="code"><pre><span class="line">-- 两横代表单行注释.</span><br><span class="line"></span><br><span class="line">--[[</span><br><span class="line">    这样是多行注释.</span><br><span class="line">--]]</span><br><span class="line"></span><br><span class="line">----------------------------------------------------</span><br><span class="line">-- 1. 变量及流程控制.</span><br><span class="line">----------------------------------------------------</span><br><span class="line"></span><br><span class="line">num &#x3D; 42  -- 数字是双精度的.</span><br><span class="line">-- 别担心，64 位双精度里有 52 位</span><br><span class="line">-- 用于存储精确 int 值；对于机器精度</span><br><span class="line">-- 小于 52 位的整数来说不是问题</span><br><span class="line"></span><br><span class="line">s &#x3D; &#39;walternate&#39;  -- 类似 Python 的字符串.</span><br><span class="line">t &#x3D; &quot;双引号也行&quot;</span><br><span class="line">u &#x3D; [[ 双中括号</span><br><span class="line">可以赋值</span><br><span class="line">多行字符串.]]</span><br><span class="line">t &#x3D; nil  -- 未定义变量 t; Lua 具有垃圾回收机制.</span><br><span class="line"></span><br><span class="line">-- 用 do&#x2F;end 这类关键字表示代码块:</span><br><span class="line">while num &lt; 50 do</span><br><span class="line">  num &#x3D; num + 1  -- 没有 ++ 或者 +&#x3D; 这样的运算符.</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">-- If 代码块:</span><br><span class="line">if num &gt; 40 then</span><br><span class="line">  print(&#39;over 40&#39;)</span><br><span class="line">elseif s ~&#x3D; &#39;walternate&#39; then  -- ~&#x3D; 表示不等于.</span><br><span class="line">  -- 等于用 &#x3D;&#x3D; 表示; 字符串也可以用来比较.</span><br><span class="line">  io.write(&#39;not over 40\n&#39;)  -- 默认控制台输出.</span><br><span class="line">else</span><br><span class="line">  -- 变量默认是全局的.</span><br><span class="line">  thisIsGlobal &#x3D; 5  -- 驼峰变量命名法.</span><br><span class="line"></span><br><span class="line">  -- 这样是局部变量:</span><br><span class="line">  local line &#x3D; io.read()  -- 控制台读取输入.</span><br><span class="line"></span><br><span class="line">  -- 字符串用 .. 连接起来:</span><br><span class="line">  print(&#39;Winter is coming, &#39; .. line)</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">-- 未定义变量返回 nil.</span><br><span class="line">-- 这样做不会报错:</span><br><span class="line">foo &#x3D; anUnknownVariable  -- 此时 foo &#x3D; nil.</span><br><span class="line"></span><br><span class="line">aBoolValue &#x3D; false</span><br><span class="line"></span><br><span class="line">-- 只有 nil 和 false 表示假; 0 和 &#39;&#39; 都是真!</span><br><span class="line">if not aBoolValue then print(&#39;twas false&#39;) end</span><br><span class="line"></span><br><span class="line">-- &#39;or&#39; 两边一个真即为真； &#39;and&#39; 两边一个假即为假.</span><br><span class="line">ans &#x3D; aBoolValue and &#39;yes&#39; or &#39;no&#39;  --&gt; 永远返回 &#39;no&#39;</span><br><span class="line"></span><br><span class="line">karlSum &#x3D; 0</span><br><span class="line">for i &#x3D; 1, 100 do  -- 循环包含两端极值.</span><br><span class="line">  karlSum &#x3D; karlSum + i</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">-- 用 &quot;100, 1, -1&quot; 即可实现倒计数:</span><br><span class="line">fredSum &#x3D; 0</span><br><span class="line">for j &#x3D; 100, 1, -1 do fredSum &#x3D; fredSum + j end</span><br><span class="line"></span><br><span class="line">-- 总之, 循环范围用 起始值, 终值[, 步进值] 表示.</span><br><span class="line"></span><br><span class="line">-- 另一种循环:</span><br><span class="line">repeat</span><br><span class="line">  print(&#39;the way of the future&#39;)</span><br><span class="line">  num &#x3D; num - 1</span><br><span class="line">until num &#x3D;&#x3D; 0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">----------------------------------------------------</span><br><span class="line">-- 2. 函数.</span><br><span class="line">----------------------------------------------------</span><br><span class="line"></span><br><span class="line">function fib(n)</span><br><span class="line">  if n &lt; 2 then return 1 end</span><br><span class="line">  return fib(n - 2) + fib(n - 1)</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">-- 支持闭包及匿名函数:</span><br><span class="line">function adder(x)</span><br><span class="line">  -- 当 adder 被调用时</span><br><span class="line">  -- 返回函数被创建, 而且记得参数 x:</span><br><span class="line">  return function (y) return x + y end</span><br><span class="line">end</span><br><span class="line">a1 &#x3D; adder(9)</span><br><span class="line">a2 &#x3D; adder(36)</span><br><span class="line">print(a1(16))  --&gt; 25</span><br><span class="line">print(a2(64))  --&gt; 100</span><br><span class="line"></span><br><span class="line">-- 返回值, 函数调用参数和赋值语句</span><br><span class="line">-- 都遵循一一对应的关系. 如果遇到长度不等的情况,</span><br><span class="line">-- 不足的用 nil 弥补;</span><br><span class="line">-- 多余的被丢弃.</span><br><span class="line"></span><br><span class="line">x, y, z &#x3D; 1, 2, 3, 4</span><br><span class="line">-- 此时 x &#x3D; 1, y &#x3D; 2, z &#x3D; 3, 然后4 被丢弃.</span><br><span class="line"></span><br><span class="line">function bar(a, b, c)</span><br><span class="line">  print(a, b, c)</span><br><span class="line">  return 4, 8, 15, 16, 23, 42</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">x, y &#x3D; bar(&#39;zaphod&#39;)  --&gt; 输出 &quot;zaphod  nil nil&quot;</span><br><span class="line">-- 此时 x &#x3D; 4, y &#x3D; 8, 然后 15..42 被丢弃.</span><br><span class="line"></span><br><span class="line">-- 函数优先级最高, 可以是 local&#x2F;global.</span><br><span class="line">-- 下面两个等价:</span><br><span class="line">function f(x) return x * x end</span><br><span class="line">f &#x3D; function (x) return x * x end</span><br><span class="line"></span><br><span class="line">-- 下面两个也等价:</span><br><span class="line">local function g(x) return math.sin(x) end</span><br><span class="line">local g; g  &#x3D; function (x) return math.sin(x) end</span><br><span class="line">-- 这里 &#39;local g&#39; 声明意味着可以用 g 引用自己.</span><br><span class="line"></span><br><span class="line">-- 顺带一提, 三角函数使用的是弧度制.</span><br><span class="line"></span><br><span class="line">-- 用一个参数调用函数可以不带小括号:</span><br><span class="line">print &#39;hello&#39;  -- 正常工作.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">----------------------------------------------------</span><br><span class="line">-- 3. 表.</span><br><span class="line">----------------------------------------------------</span><br><span class="line"></span><br><span class="line">-- Table 是 Lua 里的唯一一种数据结构;</span><br><span class="line">-- 类似于数组.</span><br><span class="line">-- 像 php 的 arrays 或是 js 的 objects,</span><br><span class="line">-- 它是由哈希索引的字典还能当列表使用.</span><br><span class="line"></span><br><span class="line">-- 当作字典 &#x2F; 映射使用举例:</span><br><span class="line"></span><br><span class="line">-- 默认使用字符串作为索引键:</span><br><span class="line">t &#x3D; &#123;key1 &#x3D; &#39;value1&#39;, key2 &#x3D; false&#125;</span><br><span class="line"></span><br><span class="line">-- 使用类似js的 . 操作符获取值:</span><br><span class="line">print(t.key1)  -- 输出 &#39;value1&#39;.</span><br><span class="line">t.newKey &#x3D; &#123;&#125;  -- 增加一个键值对.</span><br><span class="line">t.key2 &#x3D; nil   -- 从表中去掉key2.</span><br><span class="line"></span><br><span class="line">-- 中括号可以使任何 (非nil) 值作为键:</span><br><span class="line">u &#x3D; &#123;[&#39;@!#&#39;] &#x3D; &#39;qbert&#39;, [&#123;&#125;] &#x3D; 1729, [6.28] &#x3D; &#39;tau&#39;&#125;</span><br><span class="line">print(u[6.28])  -- 输出 &quot;tau&quot;</span><br><span class="line"></span><br><span class="line">-- 对于字符串和数字的键, 可以直接索引.</span><br><span class="line">-- 但是对于表的键, 索引的是它的哈希.</span><br><span class="line">a &#x3D; u[&#39;@!#&#39;]  -- 此时 a &#x3D; &#39;qbert&#39;.</span><br><span class="line">b &#x3D; u[&#123;&#125;]     -- 我们希望赋值 1729, 但是实际上赋的值是 nil:</span><br><span class="line">-- b &#x3D; nil 因为索引查找失败. 之所以失败</span><br><span class="line">-- 此时的键是一个新表</span><br><span class="line">-- 这个表的哈希与赋初值的时候并不相同.</span><br><span class="line">-- 所以用字符串和数字当作键更便捷一点.</span><br><span class="line"></span><br><span class="line">-- 表作为唯一参数的函数调用不用加小括号:</span><br><span class="line">function h(x) print(x.key1) end</span><br><span class="line">h&#123;key1 &#x3D; &#39;Sonmi~451&#39;&#125;  -- Prints &#39;Sonmi~451&#39;.</span><br><span class="line"></span><br><span class="line">for key, val in pairs(u) do  -- 表迭代.</span><br><span class="line">  print(key, val)</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">-- _G 是一个内置全局表.</span><br><span class="line">print(_G[&#39;_G&#39;] &#x3D;&#x3D; _G)  -- 输出 &#39;true&#39;.</span><br><span class="line"></span><br><span class="line">-- 以表作为列表 &#x2F; 数组:</span><br><span class="line"></span><br><span class="line">-- 列表默认以数字为键:</span><br><span class="line">v &#x3D; &#123;&#39;value1&#39;, &#39;value2&#39;, 1.21, &#39;gigawatts&#39;&#125;</span><br><span class="line">for i &#x3D; 1, #v do  -- #v 代表v列表的长度.</span><br><span class="line">  print(v[i])  -- 迭代从键 1 开始</span><br><span class="line">end</span><br><span class="line">-- 这里 &#39;列表&#39; 并不是一个专有类型. v 本质上是 table</span><br><span class="line">-- 以连续数字为键的表, 可以当作列表使用.</span><br><span class="line"></span><br><span class="line">----------------------------------------------------</span><br><span class="line">-- 3.1 元表和元函数.</span><br><span class="line">----------------------------------------------------</span><br><span class="line"></span><br><span class="line">-- table 中可以设置元表</span><br><span class="line">-- 可以用来覆写运算符. 后面还会看到</span><br><span class="line">-- 类似js的prototype功能.</span><br><span class="line"></span><br><span class="line">f1 &#x3D; &#123;a &#x3D; 1, b &#x3D; 2&#125;  -- 代表分数 a&#x2F;b.</span><br><span class="line">f2 &#x3D; &#123;a &#x3D; 2, b &#x3D; 3&#125;</span><br><span class="line"></span><br><span class="line">-- 这样写肯定报错:</span><br><span class="line">-- s &#x3D; f1 + f2</span><br><span class="line"></span><br><span class="line">metafraction &#x3D; &#123;&#125;</span><br><span class="line">function metafraction.__add(f1, f2)</span><br><span class="line">  sum &#x3D; &#123;&#125;</span><br><span class="line">  sum.b &#x3D; f1.b * f2.b</span><br><span class="line">  sum.a &#x3D; f1.a * f2.b + f2.a * f1.b</span><br><span class="line">  return sum</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">setmetatable(f1, metafraction)</span><br><span class="line">setmetatable(f2, metafraction)</span><br><span class="line"></span><br><span class="line">s &#x3D; f1 + f2  -- 这样写将会调用 f1 元表上的 __add(f1, f2) 函数</span><br><span class="line"></span><br><span class="line">-- f1, f2 不含对自己元表的引用, 这一点</span><br><span class="line">-- 不同于js的prototype, 要想取得元表必须使用</span><br><span class="line">-- getmetatable(f1) 这样的函数. 元表本身也是表</span><br><span class="line">-- 里面的键是Lua事先定义好的, 比如 __add.</span><br><span class="line"></span><br><span class="line">-- 因为s没有设置元表所以下面这么写行不通:</span><br><span class="line">-- t &#x3D; s + s</span><br><span class="line">-- 下面的类似面向对象的写法就能解决这个问题.</span><br><span class="line"></span><br><span class="line">-- 使用元表的 __index 键可以制造类似 . 属性的读取操作:</span><br><span class="line">defaultFavs &#x3D; &#123;animal &#x3D; &#39;gru&#39;, food &#x3D; &#39;donuts&#39;&#125;</span><br><span class="line">myFavs &#x3D; &#123;food &#x3D; &#39;pizza&#39;&#125;</span><br><span class="line">setmetatable(myFavs, &#123;__index &#x3D; defaultFavs&#125;)</span><br><span class="line">eatenBy &#x3D; myFavs.animal  -- 多亏元表才可以这么写!</span><br><span class="line"></span><br><span class="line">-- 表里没找到的键会在其元表的</span><br><span class="line">-- __index 表里找, 没找到的话会在 __index 表元表的 __index 表里找, 如此递归地搜索下去.</span><br><span class="line"></span><br><span class="line">-- __index 还能被赋予形如 function(tbl, key) 的函数</span><br><span class="line">-- 以便在未找到键时直接自动调用.</span><br><span class="line"></span><br><span class="line">-- 像 __index,add, .. 这些称作元函数.</span><br><span class="line">-- 下面列举了元表里所有的预定义元函数.</span><br><span class="line"></span><br><span class="line">-- __add(a, b)                     for a + b</span><br><span class="line">-- __sub(a, b)                     for a - b</span><br><span class="line">-- __mul(a, b)                     for a * b</span><br><span class="line">-- __div(a, b)                     for a &#x2F; b</span><br><span class="line">-- __mod(a, b)                     for a % b</span><br><span class="line">-- __pow(a, b)                     for a ^ b</span><br><span class="line">-- __unm(a)                        for -a</span><br><span class="line">-- __concat(a, b)                  for a .. b</span><br><span class="line">-- __len(a)                        for #a</span><br><span class="line">-- __eq(a, b)                      for a &#x3D;&#x3D; b</span><br><span class="line">-- __lt(a, b)                      for a &lt; b</span><br><span class="line">-- __le(a, b)                      for a &lt;&#x3D; b</span><br><span class="line">-- __index(a, b)  &lt;fn or a table&gt;  for a.b</span><br><span class="line">-- __newindex(a, b, c)             for a.b &#x3D; c</span><br><span class="line">-- __call(a, ...)                  for a(...)</span><br><span class="line"></span><br><span class="line">----------------------------------------------------</span><br><span class="line">-- 3.2 面向对象和继承.</span><br><span class="line">----------------------------------------------------</span><br><span class="line"></span><br><span class="line">-- Lua里没有类的概念; 只能通过</span><br><span class="line">-- 表和元表来实现类似功能.</span><br><span class="line"></span><br><span class="line">-- 代码下面有解释.</span><br><span class="line"></span><br><span class="line">Dog &#x3D; &#123;&#125;                                   -- 1.</span><br><span class="line"></span><br><span class="line">function Dog:new()                         -- 2.</span><br><span class="line">  newObj &#x3D; &#123;sound &#x3D; &#39;woof&#39;&#125;                -- 3.</span><br><span class="line">  self.__index &#x3D; self                      -- 4.</span><br><span class="line">  return setmetatable(newObj, self)        -- 5.</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">function Dog:makeSound()                   -- 6.</span><br><span class="line">  print(&#39;I say &#39; .. self.sound)</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">mrDog &#x3D; Dog:new()                          -- 7.</span><br><span class="line">mrDog:makeSound()  -- &#39;I say woof&#39;         -- 8.</span><br><span class="line"></span><br><span class="line">-- 1. Dog 作为一个类; 实际上是个表.</span><br><span class="line">-- 2. 函数 tablename:fn(...) 等价于</span><br><span class="line">--    函数 tablename.fn(self, ...)</span><br><span class="line">--    操作符 : 隐式插入了第一个参数 self.</span><br><span class="line">--    至于self的取值请参考下面的 7 和 8.</span><br><span class="line">-- 3. newObj 作为 Dog 类的实例.</span><br><span class="line">-- 4. self &#x3D; 继承的类. 通常</span><br><span class="line">--    self &#x3D; Dog, 但是继承会改变它.</span><br><span class="line">--    newObj 具有 self 上的函数因为我们把</span><br><span class="line">--    newObj 的元表和 self 的 __index 都设置为了 self.</span><br><span class="line">-- 5. 要记得 setmetatable 函数会将其第一个参数作为返回值.</span><br><span class="line">-- 6. 类似于上面的 2, 但是这次的</span><br><span class="line">--    self 不是类而是实例.</span><br><span class="line">-- 7. 等同于 Dog.new(Dog), 所以 new() 里面的 self &#x3D; Dog.</span><br><span class="line">-- 8. 等同于 mrDog.makeSound(mrDog); 这里的 self &#x3D; mrDog.</span><br><span class="line"></span><br><span class="line">----------------------------------------------------</span><br><span class="line"></span><br><span class="line">-- 继承示例:</span><br><span class="line"></span><br><span class="line">LoudDog &#x3D; Dog:new()                           -- 1.</span><br><span class="line"></span><br><span class="line">function LoudDog:makeSound()</span><br><span class="line">  s &#x3D; self.sound .. &#39; &#39;                       -- 2.</span><br><span class="line">  print(s .. s .. s)</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">seymour &#x3D; LoudDog:new()                       -- 3.</span><br><span class="line">seymour:makeSound()  -- &#39;woof woof woof&#39;      -- 4.</span><br><span class="line"></span><br><span class="line">-- 1. LoudDog 具有 Dog 的变量和函数.</span><br><span class="line">-- 2. self 因为 new() 而具有一个 &#39;sound&#39; 键, 参见 3.</span><br><span class="line">-- 3. 等同于 LoudDog.new(LoudDog), 然后查找元表得到</span><br><span class="line">--    Dog.new(LoudDog) 因为 LoudDog 自己没有 &#39;new&#39; 键,</span><br><span class="line">--    而其元表的 __index &#x3D; Dog.</span><br><span class="line">--    结果就是: seymour 的元表是 LoudDog, 然后</span><br><span class="line">--    LoudDog.__index &#x3D; LoudDog. 所以 seymour.key 就</span><br><span class="line">--    &#x3D; seymour.key, LoudDog.key, Dog.key, 这样就实现了</span><br><span class="line">--    key 的继承.</span><br><span class="line">-- 4. &#39;makeSound&#39; 键在 LoudDog 里找到; 所以</span><br><span class="line">--    等同于 LoudDog.makeSound(seymour).</span><br><span class="line"></span><br><span class="line">-- 需要的话, 子类的 new() 和其父类相似:</span><br><span class="line">function LoudDog:new()</span><br><span class="line">  newObj &#x3D; &#123;&#125;</span><br><span class="line">  -- 实例化 newObj</span><br><span class="line">  self.__index &#x3D; self</span><br><span class="line">  return setmetatable(newObj, self)</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">----------------------------------------------------</span><br><span class="line">-- 4. 模块.</span><br><span class="line">----------------------------------------------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">--[[ 我把这部分内容注释掉以便其能</span><br><span class="line">--   作为 Lua 程序正常运行.</span><br><span class="line">-- 假设我们有个文件 mod.lua, 其内容如下:</span><br><span class="line">local M &#x3D; &#123;&#125;</span><br><span class="line"></span><br><span class="line">local function sayMyName()</span><br><span class="line">  print(&#39;Hrunkner&#39;)</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">function M.sayHello()</span><br><span class="line">  print(&#39;Why hello there&#39;)</span><br><span class="line">  sayMyName()</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">return M</span><br><span class="line"></span><br><span class="line">-- 另一个文件就可以使用 mod.lua 里的函数:</span><br><span class="line">local mod &#x3D; require(&#39;mod&#39;)  -- 运行 mod.lua 文件.</span><br><span class="line"></span><br><span class="line">-- require 是加载模块的标准方法.</span><br><span class="line">-- require 这里的作用相当于:     (没明白的话可以接着往下看)</span><br><span class="line">local mod &#x3D; (function ()</span><br><span class="line">  &lt;mod.lua 的脚本内容&gt;</span><br><span class="line">end)()</span><br><span class="line">-- 就好像 mod.lua 是一个函数的函数体, 所以</span><br><span class="line">-- mod.lua 里的本地变量在外面不能访问.</span><br><span class="line"></span><br><span class="line">-- 这样可以运行因为这里的 mod &#x3D; mod.lua 里的 M:</span><br><span class="line">mod.sayHello()  -- Says hello to Hrunkner.</span><br><span class="line"></span><br><span class="line">-- 这样不能运行; 因为 sayMyName 是 mod.lua 里的本地函数:</span><br><span class="line">mod.sayMyName()  -- error</span><br><span class="line"></span><br><span class="line">-- require 的返回值会自动缓存</span><br><span class="line">-- 所以一个脚本只会执行一次, 即使它被 require 很多次.</span><br><span class="line"></span><br><span class="line">-- 假设 mod2.lua 里包含函数 &quot;print(&#39;Hi!&#39;)&quot;.</span><br><span class="line">local a &#x3D; require(&#39;mod2&#39;)  -- 输出 Hi!</span><br><span class="line">local b &#x3D; require(&#39;mod2&#39;)  -- 没有输出; a&#x3D;b.</span><br><span class="line"></span><br><span class="line">-- dofile 类似于 require 但并不缓存:</span><br><span class="line">dofile(&#39;mod2.lua&#39;)  --&gt; Hi!</span><br><span class="line">dofile(&#39;mod2.lua&#39;)  --&gt; Hi! (又执行了一次)</span><br><span class="line"></span><br><span class="line">-- loadfile 载入 lua 文件但不运行它.</span><br><span class="line">f &#x3D; loadfile(&#39;mod2.lua&#39;)  -- 手动调用 f() 才会开始执行.</span><br><span class="line"></span><br><span class="line">-- loadstring 是 loadfile 的字符串版本.</span><br><span class="line">g &#x3D; loadstring(&#39;print(343)&#39;)  -- 返回输出函数.</span><br><span class="line">g()  -- 输出 343; 之前并没有输出.</span><br><span class="line"></span><br><span class="line">--]]</span><br><span class="line"></span><br><span class="line">----------------------------------------------------</span><br><span class="line">-- 5. 参考.</span><br><span class="line">----------------------------------------------------</span><br><span class="line"></span><br><span class="line">--[[</span><br><span class="line"></span><br><span class="line">我希望用 Löve 2D 游戏引擎做游戏, 所以开始学习 Lua. 这是动机.</span><br><span class="line"></span><br><span class="line">我一开始从 BlackBulletIV 的 Lua for programmers 中学习.</span><br><span class="line">然后阅读了官方的 Programming in Lua 电子书.</span><br><span class="line">这是方法.</span><br><span class="line"></span><br><span class="line">关于 Lua 的介绍可以参考 lua-users.org.</span><br><span class="line"></span><br><span class="line">这里并没有介绍 Lua 的标准库:</span><br><span class="line"> * string 库</span><br><span class="line"> * table 库</span><br><span class="line"> * math 库</span><br><span class="line"> * io 库</span><br><span class="line"> * os 库</span><br><span class="line"></span><br><span class="line">其实本教程也是个 Lua 文件.</span><br><span class="line">可以把它保存为 learn.lua 然后输入 &quot;lua learn.lua&quot; 来执行它!</span><br><span class="line"></span><br><span class="line">这是我第一次给 tylerneylon.com 写稿. </span><br><span class="line">本教程也可以在 github gist 上找到. 类似</span><br><span class="line">这样写法的其他语言的教程, 在这里:</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;learnxinyminutes.com&#x2F;</span><br><span class="line"></span><br><span class="line">祝你愉快学 Lua!</span><br><span class="line"></span><br><span class="line">--]]</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Learn Lua in 15 Minutes 中文版</summary>
    
    
    
    
    <category term="blog" scheme="https://cocosgames.com/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>换引擎了 -- Defold!</title>
    <link href="https://cocosgames.com/2023/03/13/Defold/"/>
    <id>https://cocosgames.com/2023/03/13/Defold/</id>
    <published>2023-03-13T11:43:46.072Z</published>
    <updated>2023-03-13T12:04:50.373Z</updated>
    
    <content type="html"><![CDATA[<p>由于 Cocos Creator 的稳定性实在欠佳, 无奈之下更换游戏引擎, <a href="https://defold.com/">Defold</a> 是不二之选.</p><a id="more"></a><p><img src="https://forum.defold.com/uploads/default/original/3X/3/9/397d7884aa8851a1697ec548fb01325643938a16.png" alt="Defold"></p><p>下面是 Defold 作者称赞自己的引擎有三点好处:</p><ul><li>Focus on small size - A web export is less than 1MB gzipped. Other platforms between 2 and 3 MB.</li><li>Zero-setup policy - As a developer you only install Defold once. No additional tools are needed to create bundles for each supported platform. No Android Studio, no XCode. </li><li>Truly cross platform - Write once run everywhere is true for Defold. We focus on platform agnostic APIs where it is possible to create application bundles for all supported platforms without any changes to the code.</li></ul><p>翻译过来就是 <strong>核心超级小</strong>, <strong>集成编辑器</strong> 和 <strong>真正跨平台</strong>. 真的很吸引人啊! 但是我最看重的还是其<a href="https://twitter.com/defold/status/1622896629056524292">稳定性</a>.</p><p>The Defold Foundation can not assist with funding or publishing but we’re happy to promote new games on Twitter and other social channels, and in newsletters and on the website.</p><p>When it comes to monetization in general Defold has support for In-app purchases and subscriptions as well as many of the most popular ad networks. Defold is also compliant with most of the latest SDKs and keeps up-to-date with OS updates. This helps in getting featured by for instance Apple or Google.</p><p>Defold 目前不做游戏发行, 但是毋庸置疑的是开发者能用 Defold 实现作品变现 (<a href="https://defold.com/tags/stars/monetization/">https://defold.com/tags/stars/monetization/</a>).</p><p>虽然目前 Defold 主要作为 2D 游戏引擎, 但是官方正在协同社区力量探讨 3D 的可能性.</p><p>在下不才, 试着翻译了 Defold 的 <a href="https://defold.com/zh/manuals/introduction/">全部文档</a>, 还是官方论坛 <a href="https://forum.defold.com/c/chinese/492">中文分区</a> 版主.</p><p>欢迎加入 Defold!</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;由于 Cocos Creator 的稳定性实在欠佳, 无奈之下更换游戏引擎, &lt;a href=&quot;https://defold.com/&quot;&gt;Defold&lt;/a&gt; 是不二之选.&lt;/p&gt;</summary>
    
    
    
    
    <category term="blog" scheme="https://cocosgames.com/tags/blog/"/>
    
    <category term="game" scheme="https://cocosgames.com/tags/game/"/>
    
  </entry>
  
  <entry>
    <title>Defold + Colyseus Arena 《五子目》</title>
    <link href="https://cocosgames.com/2021/12/27/wuzimu/"/>
    <id>https://cocosgames.com/2021/12/27/wuzimu/</id>
    <published>2021-12-27T08:45:40.697Z</published>
    <updated>2023-03-13T11:49:36.177Z</updated>
    
    <content type="html"><![CDATA[<p>哈嘍大家好!</p><p>這次給大家展示的是一個由 Colyseus (Arena) + Defold 引擎製作的在綫五子棋游戲. 只需要一次編寫就可以在 Windows, Mac OS, Linux, IOS, Android, 以及各種瀏覽器上運行, 只要有屏幕的設備就可以互相連接, 是不是很酷?</p><a id="more"></a><p><img src="/assets/wuzimu/wuzimu.png" alt="wuzimu.png"><br>(基於包體原因 Github 上的項目中去掉了背景)</p><ul><li>客戶端<br>客戶端使用 Defold 引擎編寫, 這是一個高性能又跨平臺的 2D 游戲引擎.<br>Defold 使用的是 Lua 語言, 所以數組的索引是從 1 開始的, 這個需要注意一下.</li></ul><ul><li><p>服務端<br>我們的 <a href="https://docs.colyseus.io/">Colyseus 服務器</a>閃亮登場!<br>還不瞭解  Colyseus 的小夥伴們請參考<a href="https://docs.colyseus.io/colyseus/">這裏</a>.<br>看看一發 npm 脚本命令建立一個完整的服務器.<br><img src="/assets/wuzimu/colyseus.png" alt="colyseus.png"><br>如果看到控制臺輸出了這句話, 那麽恭喜, 你的服務器建立成功!</p></li><li><p><a href="https://console.colyseus.io/">Colyseus Arena</a><br>將服務器程序編譯並上傳至 <a href="https://console.colyseus.io/">Colyseus Arena 服务</a>. Arena 服務是基於使用量計費的自動擴展的 Colyseus 云, 提供免費試用, 詳情參考<a href="https://docs.colyseus.io/arena/">這裏</a>.<br><img src="/assets/wuzimu/arena.png" alt="arena.png"><br>上傳完代碼記得點擊 Deploy 按鈕, 否則不會生效哦!</p></li><li><p>開源參考<br><a href="https://github.com/CocosGames/WuZiMu">https://github.com/CocosGames/WuZiMu</a></p></li><li><p>在线试玩 (服务器已下线)<br><del><a href="https://cocosgames.github.io/WuZiMu/">https://cocosgames.github.io/WuZiMu/</a></del><br><del><a href="https://cocosgames.com/assets/host/WuZiMu/">https://cocosgames.com/assets/host/WuZiMu/</a></del></p></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;哈嘍大家好!&lt;/p&gt;
&lt;p&gt;這次給大家展示的是一個由 Colyseus (Arena) + Defold 引擎製作的在綫五子棋游戲. 只需要一次編寫就可以在 Windows, Mac OS, Linux, IOS, Android, 以及各種瀏覽器上運行, 只要有屏幕的設備就可以互相連接, 是不是很酷?&lt;/p&gt;</summary>
    
    
    
    
    <category term="blog" scheme="https://cocosgames.com/tags/blog/"/>
    
    <category term="game" scheme="https://cocosgames.com/tags/game/"/>
    
  </entry>
  
  <entry>
    <title>Cocos Creator 3 + Colyseus</title>
    <link href="https://cocosgames.com/2021/08/19/Cocos%20Creator%203%20+%20Colyseus/"/>
    <id>https://cocosgames.com/2021/08/19/Cocos%20Creator%203%20+%20Colyseus/</id>
    <published>2021-08-19T10:50:48.583Z</published>
    <updated>2023-03-13T11:16:07.942Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://cocos.com/creator">Cocos Creator</a> 是跨平台 2D/3D 游戏开发工具.</p><a id="more"></a><p>Colyseus SDK 在 Cocos Creator 的运用上与 <a href="https://docs.colyseus.io/getting-started/javascript-client/">JavaScript SDK</a> 类似. 主要区别在于如何通过 Cocos Creator 的 <a href="https://docs.colyseus.io/colyseus/getting-started/cocos-creator/#importing-from-the-extension">TypeScript 组件来引入服务</a>.</p><blockquote><p>想要具体实例?<br>看看 <a href="https://github.com/colyseus/cocos-demo-tictactoe">Tic Tac Toe 项目</a>.</p></blockquote><h4 id="1-安装扩展插件"><a href="#1-安装扩展插件" class="headerlink" title="1. 安装扩展插件"></a>1. 安装扩展插件</h4><ul><li>打开 <a href="https://store.cocos.com/app/en/detail/2937/">Cocos Store</a> (菜单: “扩展” » “商店”)</li><li>搜索 “Colyseus SDK”</li><li>下载扩展插件<h4 id="2-更新-tsconfig-json-文件"><a href="#2-更新-tsconfig-json-文件" class="headerlink" title="2. 更新 tsconfig.json 文件"></a>2. 更新 tsconfig.json 文件</h4></li></ul><p>确认 <code>&quot;compilerOptions&quot;</code> 类目下有 <code>&quot;esModuleInterop&quot;: true</code>:</p><pre><code>// .../* Add your custom configuration here. */&quot;compilerOptions&quot;: &#123;  // ...  &quot;esModuleInterop&quot;: true  // ...&#125;// ...</code></pre><h4 id="3-导入扩展插件"><a href="#3-导入扩展插件" class="headerlink" title="3. 导入扩展插件"></a>3. 导入扩展插件</h4><p>根据路径导入 Colyseus 扩展插件:</p><pre><code>import Colyseus from &#39;db://colyseus-sdk/colyseus.js&#39;;</code></pre><p>下面给出一个更详细的示例方便大家应用于自己的项目之中.</p><p>把如下内容命名为 <code>NetworkManager.ts</code> 存入项目的 <code>assets</code> 文件夹里.</p><pre><code>import &#123; _decorator, Component, Node &#125; from &#39;cc&#39;;const &#123; ccclass, property &#125; = _decorator;import Colyseus from &#39;db://colyseus-sdk/colyseus.js&#39;;@ccclass(&#39;NetworkManager&#39;)export class NetworkManager extends Component &#123;    @property hostname = &quot;localhost&quot;;    @property port = 2567;    @property useSSL = false;    client!: Colyseus.Client;    room!: Colyseus.Room;    start () &#123;        // 实例化 Colyseus 客户端        // 连接到 (ws|wss)://hostname[:port]        this.client = new Colyseus.Client(`$&#123;this.useSSL ? &quot;wss&quot; : &quot;ws&quot;&#125;://$&#123;this.hostname&#125;$&#123;([443, 80].includes(this.port) || this.useSSL) ? &quot;&quot; : `:$&#123;this.port&#125;`&#125;`);        // 连接到 room        this.connect();    &#125;    async connect() &#123;         try &#123;            this.room = await this.client.joinOrCreate(&quot;my_room&quot;);            console.log(&quot;joined successfully!&quot;);            console.log(&quot;user&#39;s sessionId:&quot;, this.room.sessionId);            this.room.onStateChange((state) =&gt; &#123;                console.log(&quot;onStateChange: &quot;, state);            &#125;);            this.room.onLeave((code) =&gt; &#123;                console.log(&quot;onLeave:&quot;, code);            &#125;);        &#125; catch (e) &#123;            console.error(e);        &#125;    &#125;&#125;</code></pre><p>然后就可以把 NetworkManager 作为组件安放在 Cocos Creator 的任意节点上.</p><p>因为上面用到了 @property 装饰词, 所以 hostname, port 和 useSSL 这些变量都可以在 Cocos Creator 中修改:</p><p><img src="https://docs.colyseus.io/colyseus/getting-started/cocos-creator-component.png" alt="Colyseus SDK on TypeScript Component"></p><hr><h4 id="另一种方法-手动将-colyseus-js-文件导入项目-不使用扩展插件"><a href="#另一种方法-手动将-colyseus-js-文件导入项目-不使用扩展插件" class="headerlink" title="另一种方法: 手动将 colyseus.js 文件导入项目 (不使用扩展插件)"></a>另一种方法: 手动将 colyseus.js 文件导入项目 (不使用扩展插件)</h4><ul><li><p><a href="https://github.com/colyseus/colyseus.js/releases">从 GitHub 上下载最新版 <code>colyseus-js-client.zip</code></a>.</p></li><li><p>把 <code>colyseus-js-client.zip</code> 里的文件解压到 <code>assets/</code> 文件夹里.</p></li><li><p>把 <code>colyseus.js</code> 和 <code>colyseus.d.ts</code> 文件移动到 Cocos Creator 项目的 <code>scripts</code> 文件夹里.</p></li><li><p>在资源面板点击 <code>colyseus.js</code>, 开启 “Import As Plugin” (详见下文图片)</p></li><li><p><strong>TypeScript</strong>: 使用 <code>import Colyseus from &quot;./colyseus.js&quot;;</code> 引入</p></li><li><p><strong>JavaScript</strong>: 使用 <code>const Colyseus = require(&quot;./colyseus.js&quot;);</code> 引入</p></li></ul><p><img src="https://docs.colyseus.io/colyseus/getting-started/cocos-creator-import-as-plugin.png" alt="Import as plugin"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://cocos.com/creator&quot;&gt;Cocos Creator&lt;/a&gt; 是跨平台 2D/3D 游戏开发工具.&lt;/p&gt;</summary>
    
    
    
    
    <category term="blog" scheme="https://cocosgames.com/tags/blog/"/>
    
    <category term="game" scheme="https://cocosgames.com/tags/game/"/>
    
  </entry>
  
  <entry>
    <title>Colyseus 为 Cocos Store 带来开源后端联网服务</title>
    <link href="https://cocosgames.com/2021/08/19/Colyseus%20%E4%B8%BA%20Cocos%20Store%20%E5%B8%A6%E6%9D%A5%E5%BC%80%E6%BA%90%E5%90%8E%E7%AB%AF%E8%81%94%E7%BD%91%E6%9C%8D%E5%8A%A1/"/>
    <id>https://cocosgames.com/2021/08/19/Colyseus%20%E4%B8%BA%20Cocos%20Store%20%E5%B8%A6%E6%9D%A5%E5%BC%80%E6%BA%90%E5%90%8E%E7%AB%AF%E8%81%94%E7%BD%91%E6%9C%8D%E5%8A%A1/</id>
    <published>2021-08-19T10:49:26.208Z</published>
    <updated>2023-03-13T11:16:07.958Z</updated>
    
    <content type="html"><![CDATA[<p>自从 Cocos Creator 3.0 之后, 我们更新了 <a href="http://store.cocos.com/app/en">Cocos Store</a>, 这是一个可以让开发者对外发布免费或者收费资源, 比如音乐, 图片, 代码之类的地方.<br>Cocos Store 及其资源在全世界范围内人气持续攀升. 精妙的工具不断涌现, 其背后的开发商功不可没. 其中具有代表性的就是由 Lucid Sight 团队开发的开源后端网络系统 <a href="https://www.colyseus.io/">Colyseus</a>.</p><a id="more"></a><p><img src="https://www.cocos.com/wp-content/uploads/2021/06/ColyseusLogo-1024x563.png" alt="Colyseus"></p><p>如果你缺乏后台开发经验或者在开发多人在线游戏时遇到麻烦, 那么开源服务器 Colyseus 及其技术团队将成为你的救星. Colyseus 是一款易用, 好用的多人在线游戏服务器, 这一点已被诸多 HTML5 和手机游戏证明.</p><p>现在它来到了 <a href="http://store.cocos.com/app/detail/2937">Cocos Store</a>, 我们通力合作确保其在 Cocos Creator 上完美运行, 并且筹划了未来的合作规划.</p><p>这里我们有请 Colyseus 的创作者 <strong>Endel Dreyer</strong>, 与 Lucid Sight 的首席技术官, Colyseus 的拥有者 <strong>Farzi Zubair</strong> 接受采访.</p><hr><p><strong>Cocos: 很高兴采访二位. 对于没听说过 Colyseus 的开发者, 你们会如何介绍自己?</strong></p><p>Colyseus 团队: 直截了当, 我们的目的是将多人在线服务大众化, 所以我们开发了 Colyseus, 一款基于 Node.js 的高级多人在线后台服务平台.</p><p>我们的初心是简化多人在线游戏的实现, 以便开发者更专注于自己的游戏体验而不必承受后台开发的种种困难. 而且, Colyseus 提供服务端与客户端全套的解决方案就是为了方便开发者使用.</p><p><strong>C: 为什么基于 Node.js?</strong></p><p>CT: Node.js 通过各种方式致力于打造完美开发体验的生态系统. 其 JIT 编译器能提供比某些 C 语言程序高出许多倍的性能. Node.js 程序运行比 Java 需要的内存更少. 而且 Colyseus 得益于 Node.js 提供的各种模块. 各种问题都可以通过搜索 (和制作) 模块找到解决方法, 比如寻路, 导航, 连接数据库等等.</p><p><strong>C: 听起来很有吸引力. 那么 Colyseus 作为一款联网工具相对于开发者已有的网络工具有什么优势呢?</strong></p><p>CT: 市面上有许多多人在线服务框架. 但是以我们的经验, 我们能提供开发者需求的绝大多数功能. 作为独立开发者, 通常无力负担大额的游戏服务软件费用, 无法直接做到服务器扩张, 或者服务器代码难以修改以适应自己的游戏.</p><p>我们的软件是开源的, 这就为开发者提供了免费的服务器程序及其修改权 (MIT协议). 这也使得 <strong>Colyseus</strong> 能运行于各种容器, 并且缩放自如 (无论是自建还是订阅 <strong>Colyseus Arena</strong> 服务都能实现快速缩放), 高级 API 使得服务器与客户端沟通更加流畅.</p><p><strong>C: 我看到你们为很多游戏引擎开发了客户端, 但是作为西方最大支持者之一, 为什么看中 Cocos Creator 和 Cocos2d-x 了呢?</strong></p><p>CT: Cocos 产品名声在外. Cocos 社区也招人爱. 我们想为其游戏开发者提供最好的多人在线解决方案. 另外, 我们是开源社区的大fan, 专门支持像 Cocos 这样的开源项目.</p><p><strong>C: 我们注意到你们的产品是用 TypeScript 写的, 就像 Cocos Creator 一样. 为什么做出使用 TS 这个决定, 这对于 Cocos Creator 意味着什么?</strong></p><p>CT: TypeScript 意味着更好的可维护性. 对于程序员来说比 JavaScript 更好. JavaScript 程序员总是犯下拼写错误这类能直接导致服务器崩溃的失误. 但是一旦使用 TypeScript, 编译器就会阻止这种事情发生. Colyseus SDK 包含全部类型定义 - 你甚至可以从 Cocos Creator 里直接获取服务端状态变量.</p><p><strong>C: 让项目接入 Colyseus 服务有多容易?</strong></p><p>CT: 首先打开商店页面找到 Colyseus 插件. 下载安装.之后就可以在你的 Typescript 组件里使用了. 实现把客户端连接到一个 (或多个) 房间, 房间里的客户端互相传递信息, 监听服务器状态变化这样各种的功能.</p><p><img src="https://www.cocos.com/wp-content/uploads/2021/06/Endel-Dreyer-1024x1024.jpg" alt="Endel Dreyer"></p><p><strong>Endel Dreyer</strong></p><p><strong>C: 换个话题. 我们观察到多人在线游戏从以前的不到十人到如今的50, 100 甚至上千人于一个副本中同时在线. Colyseus 对于这种需求是如何满足的呢?</strong></p><p>CT: 好问题. Colyseus 非常灵活，它可以为任何游戏类型或使用要求提供解决方案，因为它是开箱即用的基于房间的后台服务系统. 根据游戏复杂程度, 每个房间可以轻松支持 1500 个并发玩家 (CCU). 要是你想制作大型多人在线游戏 (MMO), 我们建议你把 “游戏世界” 分成若干个房间, 再用多线程同步房间逻辑.</p><p>我们在自己的 MMO 游戏 CSC 中使用了这种 “分割游戏世界” 的方案. 具体来说就是把宇宙根据坐标分割为多个房间. 通过设置房间参数就能实现这个功能, 然后再让客户端根据房间参数加入各个房间即可.</p><p>举个例子, 当一个玩家进入游戏时, 他的坐标是太阳系 (我们设计的) 0, 0 点即太阳的位置. 当他移动的时候, 我们根据区域定义他的新坐标. 比如一个区域是 10,000 平方公里. 当他远离太阳时, 他的坐标可能是九宫格区域之一 (0,1 1,0 1,1 -1,0 以此类推.. – 房间命名比如 “sol_0_1 =  0,1” 这样). 为了移动平滑, 我们在一开始就让玩家进入了这 9 个房间. 即初始房间和九宫格的另外 8 个房间. 玩家移动时不断地离开房间和加入新房间, 使得他始终能收到当前坐标房间和移动方向目标房间的信息. 加入多个房间的另一用途就是为玩家提供全局消息 / 聊天消息 (比如 “sol_chat, sol_global” 房间). 全 3D 世界的话也可以使用类似机制, 不同的就是把二维坐标改成三维的.</p><p>对于服务缩放, 有许多解决方法, 主要取决于你的游戏类型和游戏设计. 每个服务器上每个房间应该容纳多少人上限要合理. 这个数值很大程度上取决于游戏类型, 每秒信息数量以及游戏逻辑复杂程度. 这就是我们为 Colyseus 提供的 SaaS 托管解决方案的魅力所在. 作为程序员, 你大可不必担心服务器容量, 比如新开房间, 游戏世界随玩家数量增长而变大之类的压力. 我们的 Colyseus Arena 系统能根据你的游戏服务压力情况自动部署新服务器以保持平衡, 确保每个房间都能高效运作.</p><p><strong>C: Colyseus 为开发者提供了什么样的功能?</strong></p><p>CT: 除了刚才提到的 “房间” 机制, Colyseus 还有独创的同步机制以取代平常的收发消息功能. 改变服务器状态时客户端都会收到回调反馈.</p><p>我们的房间状态同步算法能确保网路上只有必要的部分信息在传播. 当服务器端结构变化时, 客户端会在下个 “补间时段” 与服务器同步.</p><p><strong>C: 我们很多开发人员都是这个行业的新手，所以我们很想知道网络技术在过去几年里是如何进化到今天的?</strong></p><p>CT: 最近几年间最显著的进化是容器的引入以及系统的灵活和伸缩性. 使用容器能让开发者更有效地创建和卸载服务程序. 配置得当的话, 游戏就可以轻易支持更多玩家同时不需要维护和为多余的服务器买单. Colyseus 是基于 Node.js 的轻型框架, 天生就是完美的容器应用服务系统.</p><p>过去的游戏后台要么使用最高端昂贵的机器, 要么就是使用许多的虚拟机. 容器有点像虚拟机但是部署上比虚拟机快得多. 也就是说不管新开还是卸载都能很快完成, 省去了大量因为服务缩放而产生的费用.</p><p><img src="https://www.cocos.com/wp-content/uploads/2021/06/Farzi-Zubair-819x1024.png" alt="Farzi Zubair"><br><strong>Farzi Zubair</strong></p><p><strong>C: 感觉不错啊. 要是开发者开始使用 Colyseus 开发游戏, 你能给出一些对提升游戏有帮助的建议吗?</strong></p><p>CT: 任何第一次制作多人在线游戏的开发者都应该牢记以下事情.</p><ol><li><p>开发游戏时就要考虑到作弊者，并使服务器尽可能具有权威性——因为作弊会导致游戏的完全失败. 一旦您的游戏上线，您的团队会忙不迭地工作并且急于修补漏洞，而作弊部分可能会成为最为高昂的资源消耗。这就是为什么我总是建议开发人员从一开始就尝试使服务器尽可能具有权威性, 将可能影响游戏结果的逻辑和功能限制在服务器代码中, 杜绝玩家找到作弊或破解游戏的方法.</p></li><li><p>专注于游戏体验, 把服务器端交给值得信赖的 SaaS 服务 – 自托管非常适合开发调试, 但是一旦开始就要尽快找到你的 DevOps 解决方案或者 SaaS 服务. 我们见到许多开发商到离游戏上线还剩最后几周, 都还没有考虑服务器或 SaaS 的事.</p></li></ol><p>有一个叫做 Agones 的开源服务器就做得很好.  它运行在基于 Kubernetes  上的大量 docker 容器中. 但是, 要是独立开发者或者从未与托管服务打过交道, 你会发现忽略了服务器环境这个大问题.  这通常会导致服务器匹配和 SDK 整合的失败. 所以做游戏除了开发工作还不够, 还需要聘请 DevOps 工程师然后找到合适的服务器. 对于小型游戏工作室来说, 这无疑是一笔巨大的前期成本, 并且早晚都要支付.</p><p>所以 SaaS 服务可能是更好的选择. 使用合适的 SaaS 解决方案, 您只需按使用量或 CCU 付费, 在游戏上线初期费用很低, 而当游戏越来越受欢迎的时候轻松扩张. Colyseus Arena 就是这样的解决方案, 专门设计用来运行游戏的 Colyseus 代码.</p><ol start="3"><li>保持简单 – 这可能是我们为 MMO 游戏开发者给出的最重要建议. 开发多人游戏的新手很多都着眼于消息发送和游戏的复杂度上面. 我总是建议他们尽快制作游戏原型或 MVP. 然后进行游戏测试, 确保游戏体验, 然后将其作为模板, 以更有效率的方式重新创建游戏服务器/客户端. 这种二次开发中往往更有效率.</li></ol><p><strong>Colyseus 未来的目标是什么?</strong></p><p>我们的目标一直是做你想要的 “那个” 服务器. 我们从社区获得的请求大多是支持 WebSockets 以外的其他协议, 比如 rUDP 或 WebRTC. 另一个对我们很有意义的请求是提供一个实体-组件模式. 我们一直在倾听社区和客户的更多建议.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;自从 Cocos Creator 3.0 之后, 我们更新了 &lt;a href=&quot;http://store.cocos.com/app/en&quot;&gt;Cocos Store&lt;/a&gt;, 这是一个可以让开发者对外发布免费或者收费资源, 比如音乐, 图片, 代码之类的地方.&lt;br&gt;Cocos Store 及其资源在全世界范围内人气持续攀升. 精妙的工具不断涌现, 其背后的开发商功不可没. 其中具有代表性的就是由 Lucid Sight 团队开发的开源后端网络系统 &lt;a href=&quot;https://www.colyseus.io/&quot;&gt;Colyseus&lt;/a&gt;.&lt;/p&gt;</summary>
    
    
    
    
    <category term="blog" scheme="https://cocosgames.com/tags/blog/"/>
    
    <category term="game" scheme="https://cocosgames.com/tags/game/"/>
    
  </entry>
  
  <entry>
    <title>Learn Lua in 15 Minutes</title>
    <link href="https://cocosgames.com/2021/04/30/learning_lua/"/>
    <id>https://cocosgames.com/2021/04/30/learning_lua/</id>
    <published>2021-04-30T11:47:43.208Z</published>
    <updated>2021-04-30T11:49:57.203Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Learn-Lua-in-15-Minutes-by-Tyler-Neylon"><a href="#Learn-Lua-in-15-Minutes-by-Tyler-Neylon" class="headerlink" title="Learn Lua in 15 Minutes by Tyler Neylon"></a>Learn Lua in 15 Minutes by Tyler Neylon</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br></pre></td><td class="code"><pre><span class="line">-- Two dashes start a one-line comment.</span><br><span class="line"></span><br><span class="line">--[[</span><br><span class="line">Adding two [&#39;s and ]&#39;s makes it a</span><br><span class="line">multi-line comment.</span><br><span class="line">--]]</span><br><span class="line"></span><br><span class="line">----------------------------------------------------</span><br><span class="line">-- 1. Variables and flow control.</span><br><span class="line">----------------------------------------------------</span><br><span class="line"></span><br><span class="line">num &#x3D; 42  -- All numbers are doubles.</span><br><span class="line">-- Don&#39;t freak out, 64-bit doubles have 52 bits for</span><br><span class="line">-- storing exact int values; machine precision is</span><br><span class="line">-- not a problem for ints that need &lt; 52 bits.</span><br><span class="line"></span><br><span class="line">s &#x3D; &#39;walternate&#39;  -- Immutable strings like Python.</span><br><span class="line">t &#x3D; &quot;double-quotes are also fine&quot;</span><br><span class="line">u &#x3D; [[ Double brackets</span><br><span class="line">start and end</span><br><span class="line">multi-line strings.]]</span><br><span class="line">t &#x3D; nil  -- Undefines t; Lua has garbage collection.</span><br><span class="line"></span><br><span class="line">-- Blocks are denoted with keywords like do&#x2F;end:</span><br><span class="line">while num &lt; 50 do</span><br><span class="line">num &#x3D; num + 1  -- No ++ or +&#x3D; type operators.</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">-- If clauses:</span><br><span class="line">if num &gt; 40 then</span><br><span class="line">print(&#39;over 40&#39;)</span><br><span class="line">elseif s ~&#x3D; &#39;walternate&#39; then  -- ~&#x3D; is not equals.</span><br><span class="line">-- Equality check is &#x3D;&#x3D; like Python; ok for strs.</span><br><span class="line">io.write(&#39;not over 40\n&#39;)  -- Defaults to stdout.</span><br><span class="line">else</span><br><span class="line">-- Variables are global by default.</span><br><span class="line">thisIsGlobal &#x3D; 5  -- Camel case is common.</span><br><span class="line"></span><br><span class="line">-- How to make a variable local:</span><br><span class="line">local line &#x3D; io.read()  -- Reads next stdin line.</span><br><span class="line"></span><br><span class="line">-- String concatenation uses the .. operator:</span><br><span class="line">print(&#39;Winter is coming, &#39; .. line)</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">-- Undefined variables return nil.</span><br><span class="line">-- This is not an error:</span><br><span class="line">foo &#x3D; anUnknownVariable  -- Now foo &#x3D; nil.</span><br><span class="line"></span><br><span class="line">aBoolValue &#x3D; false</span><br><span class="line"></span><br><span class="line">-- Only nil and false are falsy; 0 and &#39;&#39; are true!</span><br><span class="line">if not aBoolValue then print(&#39;twas false&#39;) end</span><br><span class="line"></span><br><span class="line">-- &#39;or&#39; and &#39;and&#39; are short-circuited.</span><br><span class="line">-- This is similar to the a?b:c operator in C&#x2F;js:</span><br><span class="line">ans &#x3D; aBoolValue and &#39;yes&#39; or &#39;no&#39;  --&gt; &#39;no&#39;</span><br><span class="line"></span><br><span class="line">karlSum &#x3D; 0</span><br><span class="line">for i &#x3D; 1, 100 do  -- The range includes both ends.</span><br><span class="line">karlSum &#x3D; karlSum + i</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">-- Use &quot;100, 1, -1&quot; as the range to count down:</span><br><span class="line">fredSum &#x3D; 0</span><br><span class="line">for j &#x3D; 100, 1, -1 do fredSum &#x3D; fredSum + j end</span><br><span class="line"></span><br><span class="line">-- In general, the range is begin, end[, step].</span><br><span class="line"></span><br><span class="line">-- Another loop construct:</span><br><span class="line">repeat</span><br><span class="line">print(&#39;the way of the future&#39;)</span><br><span class="line">num &#x3D; num - 1</span><br><span class="line">until num &#x3D;&#x3D; 0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">----------------------------------------------------</span><br><span class="line">-- 2. Functions.</span><br><span class="line">----------------------------------------------------</span><br><span class="line"></span><br><span class="line">function fib(n)</span><br><span class="line">if n &lt; 2 then return 1 end</span><br><span class="line">return fib(n - 2) + fib(n - 1)</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">-- Closures and anonymous functions are ok:</span><br><span class="line">function adder(x)</span><br><span class="line">-- The returned function is created when adder is</span><br><span class="line">-- called, and remembers the value of x:</span><br><span class="line">return function (y) return x + y end</span><br><span class="line">end</span><br><span class="line">a1 &#x3D; adder(9)</span><br><span class="line">a2 &#x3D; adder(36)</span><br><span class="line">print(a1(16))  --&gt; 25</span><br><span class="line">print(a2(64))  --&gt; 100</span><br><span class="line"></span><br><span class="line">-- Returns, func calls, and assignments all work</span><br><span class="line">-- with lists that may be mismatched in length.</span><br><span class="line">-- Unmatched receivers are nil;</span><br><span class="line">-- unmatched senders are discarded.</span><br><span class="line"></span><br><span class="line">x, y, z &#x3D; 1, 2, 3, 4</span><br><span class="line">-- Now x &#x3D; 1, y &#x3D; 2, z &#x3D; 3, and 4 is thrown away.</span><br><span class="line"></span><br><span class="line">function bar(a, b, c)</span><br><span class="line">print(a, b, c)</span><br><span class="line">return 4, 8, 15, 16, 23, 42</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">x, y &#x3D; bar(&#39;zaphod&#39;)  --&gt; prints &quot;zaphod  nil nil&quot;</span><br><span class="line">-- Now x &#x3D; 4, y &#x3D; 8, values 15..42 are discarded.</span><br><span class="line"></span><br><span class="line">-- Functions are first-class, may be local&#x2F;global.</span><br><span class="line">-- These are the same:</span><br><span class="line">function f(x) return x * x end</span><br><span class="line">f &#x3D; function (x) return x * x end</span><br><span class="line"></span><br><span class="line">-- And so are these:</span><br><span class="line">local function g(x) return math.sin(x) end</span><br><span class="line">local g; g  &#x3D; function (x) return math.sin(x) end</span><br><span class="line">-- the &#39;local g&#39; decl makes g-self-references ok.</span><br><span class="line"></span><br><span class="line">-- Trig funcs work in radians, by the way.</span><br><span class="line"></span><br><span class="line">-- Calls with one string param don&#39;t need parens:</span><br><span class="line">print &#39;hello&#39;  -- Works fine.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">----------------------------------------------------</span><br><span class="line">-- 3. Tables.</span><br><span class="line">----------------------------------------------------</span><br><span class="line"></span><br><span class="line">-- Tables &#x3D; Lua&#39;s only compound data structure;</span><br><span class="line">--          they are associative arrays.</span><br><span class="line">-- Similar to php arrays or js objects, they are</span><br><span class="line">-- hash-lookup dicts that can also be used as lists.</span><br><span class="line"></span><br><span class="line">-- Using tables as dictionaries &#x2F; maps:</span><br><span class="line"></span><br><span class="line">-- Dict literals have string keys by default:</span><br><span class="line">t &#x3D; &#123;key1 &#x3D; &#39;value1&#39;, key2 &#x3D; false&#125;</span><br><span class="line"></span><br><span class="line">-- String keys can use js-like dot notation:</span><br><span class="line">print(t.key1)  -- Prints &#39;value1&#39;.</span><br><span class="line">t.newKey &#x3D; &#123;&#125;  -- Adds a new key&#x2F;value pair.</span><br><span class="line">t.key2 &#x3D; nil   -- Removes key2 from the table.</span><br><span class="line"></span><br><span class="line">-- Literal notation for any (non-nil) value as key:</span><br><span class="line">u &#x3D; &#123;[&#39;@!#&#39;] &#x3D; &#39;qbert&#39;, [&#123;&#125;] &#x3D; 1729, [6.28] &#x3D; &#39;tau&#39;&#125;</span><br><span class="line">print(u[6.28])  -- prints &quot;tau&quot;</span><br><span class="line"></span><br><span class="line">-- Key matching is basically by value for numbers</span><br><span class="line">-- and strings, but by identity for tables.</span><br><span class="line">a &#x3D; u[&#39;@!#&#39;]  -- Now a &#x3D; &#39;qbert&#39;.</span><br><span class="line">b &#x3D; u[&#123;&#125;]     -- We might expect 1729, but it&#39;s nil:</span><br><span class="line">-- b &#x3D; nil since the lookup fails. It fails</span><br><span class="line">-- because the key we used is not the same object</span><br><span class="line">-- as the one used to store the original value. So</span><br><span class="line">-- strings &amp; numbers are more portable keys.</span><br><span class="line"></span><br><span class="line">-- A one-table-param function call needs no parens:</span><br><span class="line">function h(x) print(x.key1) end</span><br><span class="line">h&#123;key1 &#x3D; &#39;Sonmi~451&#39;&#125;  -- Prints &#39;Sonmi~451&#39;.</span><br><span class="line"></span><br><span class="line">for key, val in pairs(u) do  -- Table iteration.</span><br><span class="line">print(key, val)</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">-- _G is a special table of all globals.</span><br><span class="line">print(_G[&#39;_G&#39;] &#x3D;&#x3D; _G)  -- Prints &#39;true&#39;.</span><br><span class="line"></span><br><span class="line">-- Using tables as lists &#x2F; arrays:</span><br><span class="line"></span><br><span class="line">-- List literals implicitly set up int keys:</span><br><span class="line">v &#x3D; &#123;&#39;value1&#39;, &#39;value2&#39;, 1.21, &#39;gigawatts&#39;&#125;</span><br><span class="line">for i &#x3D; 1, #v do  -- #v is the size of v for lists.</span><br><span class="line">print(v[i])  -- Indices start at 1 !! SO CRAZY!</span><br><span class="line">end</span><br><span class="line">-- A &#39;list&#39; is not a real type. v is just a table</span><br><span class="line">-- with consecutive integer keys, treated as a list.</span><br><span class="line"></span><br><span class="line">----------------------------------------------------</span><br><span class="line">-- 3.1 Metatables and metamethods.</span><br><span class="line">----------------------------------------------------</span><br><span class="line"></span><br><span class="line">-- A table can have a metatable that gives the table</span><br><span class="line">-- operator-overloadish behavior. Later we&#39;ll see</span><br><span class="line">-- how metatables support js-prototypey behavior.</span><br><span class="line"></span><br><span class="line">f1 &#x3D; &#123;a &#x3D; 1, b &#x3D; 2&#125;  -- Represents the fraction a&#x2F;b.</span><br><span class="line">f2 &#x3D; &#123;a &#x3D; 2, b &#x3D; 3&#125;</span><br><span class="line"></span><br><span class="line">-- This would fail:</span><br><span class="line">-- s &#x3D; f1 + f2</span><br><span class="line"></span><br><span class="line">metafraction &#x3D; &#123;&#125;</span><br><span class="line">function metafraction.__add(f1, f2)</span><br><span class="line">sum &#x3D; &#123;&#125;</span><br><span class="line">sum.b &#x3D; f1.b * f2.b</span><br><span class="line">sum.a &#x3D; f1.a * f2.b + f2.a * f1.b</span><br><span class="line">return sum</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">setmetatable(f1, metafraction)</span><br><span class="line">setmetatable(f2, metafraction)</span><br><span class="line"></span><br><span class="line">s &#x3D; f1 + f2  -- call __add(f1, f2) on f1&#39;s metatable</span><br><span class="line"></span><br><span class="line">-- f1, f2 have no key for their metatable, unlike</span><br><span class="line">-- prototypes in js, so you must retrieve it as in</span><br><span class="line">-- getmetatable(f1). The metatable is a normal table</span><br><span class="line">-- with keys that Lua knows about, like __add.</span><br><span class="line"></span><br><span class="line">-- But the next line fails since s has no metatable:</span><br><span class="line">-- t &#x3D; s + s</span><br><span class="line">-- Class-like patterns given below would fix this.</span><br><span class="line"></span><br><span class="line">-- An __index on a metatable overloads dot lookups:</span><br><span class="line">defaultFavs &#x3D; &#123;animal &#x3D; &#39;gru&#39;, food &#x3D; &#39;donuts&#39;&#125;</span><br><span class="line">myFavs &#x3D; &#123;food &#x3D; &#39;pizza&#39;&#125;</span><br><span class="line">setmetatable(myFavs, &#123;__index &#x3D; defaultFavs&#125;)</span><br><span class="line">eatenBy &#x3D; myFavs.animal  -- works! thanks, metatable</span><br><span class="line"></span><br><span class="line">-- Direct table lookups that fail will retry using</span><br><span class="line">-- the metatable&#39;s __index value, and this recurses.</span><br><span class="line"></span><br><span class="line">-- An __index value can also be a function(tbl, key)</span><br><span class="line">-- for more customized lookups.</span><br><span class="line"></span><br><span class="line">-- Values of __index,add, .. are called metamethods.</span><br><span class="line">-- Full list. Here a is a table with the metamethod.</span><br><span class="line"></span><br><span class="line">-- __add(a, b)                     for a + b</span><br><span class="line">-- __sub(a, b)                     for a - b</span><br><span class="line">-- __mul(a, b)                     for a * b</span><br><span class="line">-- __div(a, b)                     for a &#x2F; b</span><br><span class="line">-- __mod(a, b)                     for a % b</span><br><span class="line">-- __pow(a, b)                     for a ^ b</span><br><span class="line">-- __unm(a)                        for -a</span><br><span class="line">-- __concat(a, b)                  for a .. b</span><br><span class="line">-- __len(a)                        for #a</span><br><span class="line">-- __eq(a, b)                      for a &#x3D;&#x3D; b</span><br><span class="line">-- __lt(a, b)                      for a &lt; b</span><br><span class="line">-- __le(a, b)                      for a &lt;&#x3D; b</span><br><span class="line">-- __index(a, b)  &lt;fn or a table&gt;  for a.b</span><br><span class="line">-- __newindex(a, b, c)             for a.b &#x3D; c</span><br><span class="line">-- __call(a, ...)                  for a(...)</span><br><span class="line"></span><br><span class="line">----------------------------------------------------</span><br><span class="line">-- 3.2 Class-like tables and inheritance.</span><br><span class="line">----------------------------------------------------</span><br><span class="line"></span><br><span class="line">-- Classes aren&#39;t built in; there are different ways</span><br><span class="line">-- to make them using tables and metatables.</span><br><span class="line"></span><br><span class="line">-- Explanation for this example is below it.</span><br><span class="line"></span><br><span class="line">Dog &#x3D; &#123;&#125;                                   -- 1.</span><br><span class="line"></span><br><span class="line">function Dog:new()                         -- 2.</span><br><span class="line">newObj &#x3D; &#123;sound &#x3D; &#39;woof&#39;&#125;                -- 3.</span><br><span class="line">self.__index &#x3D; self                      -- 4.</span><br><span class="line">return setmetatable(newObj, self)        -- 5.</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">function Dog:makeSound()                   -- 6.</span><br><span class="line">print(&#39;I say &#39; .. self.sound)</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">mrDog &#x3D; Dog:new()                          -- 7.</span><br><span class="line">mrDog:makeSound()  -- &#39;I say woof&#39;         -- 8.</span><br><span class="line"></span><br><span class="line">-- 1. Dog acts like a class; it&#39;s really a table.</span><br><span class="line">-- 2. function tablename:fn(...) is the same as</span><br><span class="line">--    function tablename.fn(self, ...)</span><br><span class="line">--    The : just adds a first arg called self.</span><br><span class="line">--    Read 7 &amp; 8 below for how self gets its value.</span><br><span class="line">-- 3. newObj will be an instance of class Dog.</span><br><span class="line">-- 4. self &#x3D; the class being instantiated. Often</span><br><span class="line">--    self &#x3D; Dog, but inheritance can change it.</span><br><span class="line">--    newObj gets self&#39;s functions when we set both</span><br><span class="line">--    newObj&#39;s metatable and self&#39;s __index to self.</span><br><span class="line">-- 5. Reminder: setmetatable returns its first arg.</span><br><span class="line">-- 6. The : works as in 2, but this time we expect</span><br><span class="line">--    self to be an instance instead of a class.</span><br><span class="line">-- 7. Same as Dog.new(Dog), so self &#x3D; Dog in new().</span><br><span class="line">-- 8. Same as mrDog.makeSound(mrDog); self &#x3D; mrDog.</span><br><span class="line"></span><br><span class="line">----------------------------------------------------</span><br><span class="line"></span><br><span class="line">-- Inheritance example:</span><br><span class="line"></span><br><span class="line">LoudDog &#x3D; Dog:new()                           -- 1.</span><br><span class="line"></span><br><span class="line">function LoudDog:makeSound()</span><br><span class="line">s &#x3D; self.sound .. &#39; &#39;                       -- 2.</span><br><span class="line">print(s .. s .. s)</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">seymour &#x3D; LoudDog:new()                       -- 3.</span><br><span class="line">seymour:makeSound()  -- &#39;woof woof woof&#39;      -- 4.</span><br><span class="line"></span><br><span class="line">-- 1. LoudDog gets Dog&#39;s methods and variables.</span><br><span class="line">-- 2. self has a &#39;sound&#39; key from new(), see 3.</span><br><span class="line">-- 3. Same as LoudDog.new(LoudDog), and converted to</span><br><span class="line">--    Dog.new(LoudDog) as LoudDog has no &#39;new&#39; key,</span><br><span class="line">--    but does have __index &#x3D; Dog on its metatable.</span><br><span class="line">--    Result: seymour&#39;s metatable is LoudDog, and</span><br><span class="line">--    LoudDog.__index &#x3D; LoudDog. So seymour.key will</span><br><span class="line">--    &#x3D; seymour.key, LoudDog.key, Dog.key, whichever</span><br><span class="line">--    table is the first with the given key.</span><br><span class="line">-- 4. The &#39;makeSound&#39; key is found in LoudDog; this</span><br><span class="line">--    is the same as LoudDog.makeSound(seymour).</span><br><span class="line"></span><br><span class="line">-- If needed, a subclass&#39;s new() is like the base&#39;s:</span><br><span class="line">function LoudDog:new()</span><br><span class="line">newObj &#x3D; &#123;&#125;</span><br><span class="line">-- set up newObj</span><br><span class="line">self.__index &#x3D; self</span><br><span class="line">return setmetatable(newObj, self)</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">----------------------------------------------------</span><br><span class="line">-- 4. Modules.</span><br><span class="line">----------------------------------------------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">--[[ I&#39;m commenting out this section so the rest of</span><br><span class="line">--   this script remains runnable.</span><br><span class="line">-- Suppose the file mod.lua looks like this:</span><br><span class="line">local M &#x3D; &#123;&#125;</span><br><span class="line"></span><br><span class="line">local function sayMyName()</span><br><span class="line">print(&#39;Hrunkner&#39;)</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">function M.sayHello()</span><br><span class="line">print(&#39;Why hello there&#39;)</span><br><span class="line">sayMyName()</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">return M</span><br><span class="line"></span><br><span class="line">-- Another file can use mod.lua&#39;s functionality:</span><br><span class="line">local mod &#x3D; require(&#39;mod&#39;)  -- Run the file mod.lua.</span><br><span class="line"></span><br><span class="line">-- require is the standard way to include modules.</span><br><span class="line">-- require acts like:     (if not cached; see below)</span><br><span class="line">local mod &#x3D; (function ()</span><br><span class="line">&lt;contents of mod.lua&gt;</span><br><span class="line">end)()</span><br><span class="line">-- It&#39;s like mod.lua is a function body, so that</span><br><span class="line">-- locals inside mod.lua are invisible outside it.</span><br><span class="line"></span><br><span class="line">-- This works because mod here &#x3D; M in mod.lua:</span><br><span class="line">mod.sayHello()  -- Says hello to Hrunkner.</span><br><span class="line"></span><br><span class="line">-- This is wrong; sayMyName only exists in mod.lua:</span><br><span class="line">mod.sayMyName()  -- error</span><br><span class="line"></span><br><span class="line">-- require&#39;s return values are cached so a file is</span><br><span class="line">-- run at most once, even when require&#39;d many times.</span><br><span class="line"></span><br><span class="line">-- Suppose mod2.lua contains &quot;print(&#39;Hi!&#39;)&quot;.</span><br><span class="line">local a &#x3D; require(&#39;mod2&#39;)  -- Prints Hi!</span><br><span class="line">local b &#x3D; require(&#39;mod2&#39;)  -- Doesn&#39;t print; a&#x3D;b.</span><br><span class="line"></span><br><span class="line">-- dofile is like require without caching:</span><br><span class="line">dofile(&#39;mod2.lua&#39;)  --&gt; Hi!</span><br><span class="line">dofile(&#39;mod2.lua&#39;)  --&gt; Hi! (runs it again)</span><br><span class="line"></span><br><span class="line">-- loadfile loads a lua file but doesn&#39;t run it yet.</span><br><span class="line">f &#x3D; loadfile(&#39;mod2.lua&#39;)  -- Call f() to run it.</span><br><span class="line"></span><br><span class="line">-- loadstring is loadfile for strings.</span><br><span class="line">g &#x3D; loadstring(&#39;print(343)&#39;)  -- Returns a function.</span><br><span class="line">g()  -- Prints out 343; nothing printed before now.</span><br><span class="line"></span><br><span class="line">--]]</span><br><span class="line"></span><br><span class="line">----------------------------------------------------</span><br><span class="line">-- 5. References.</span><br><span class="line">----------------------------------------------------</span><br><span class="line"></span><br><span class="line">--[[</span><br><span class="line"></span><br><span class="line">I was excited to learn Lua so I could make games</span><br><span class="line">with the Löve 2D game engine. That&#39;s the why.</span><br><span class="line"></span><br><span class="line">I started with BlackBulletIV&#39;s Lua for programmers.</span><br><span class="line">Next I read the official Programming in Lua book.</span><br><span class="line">That&#39;s the how.</span><br><span class="line"></span><br><span class="line">It might be helpful to check out the Lua short</span><br><span class="line">reference on lua-users.org.</span><br><span class="line"></span><br><span class="line">The main topics not covered are standard libraries:</span><br><span class="line">* string library</span><br><span class="line">* table library</span><br><span class="line">* math library</span><br><span class="line">* io library</span><br><span class="line">* os library</span><br><span class="line"></span><br><span class="line">By the way, this entire file is valid Lua; save it</span><br><span class="line">as learn.lua and run it with &quot;lua learn.lua&quot; !</span><br><span class="line"></span><br><span class="line">This was first written for tylerneylon.com. It&#39;s</span><br><span class="line">also available as a github gist. Tutorials for other</span><br><span class="line">languages, in the same style as this one, are here:</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;learnxinyminutes.com&#x2F;</span><br><span class="line"></span><br><span class="line">Have fun with Lua!</span><br><span class="line"></span><br><span class="line">--]]</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Learn Lua in 15 Minutes by Tyler Neylon</summary>
    
    
    
    
    <category term="blog" scheme="https://cocosgames.com/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>Learning to wren 2</title>
    <link href="https://cocosgames.com/2021/04/29/wren2/"/>
    <id>https://cocosgames.com/2021/04/29/wren2/</id>
    <published>2021-04-29T10:04:06.001Z</published>
    <updated>2021-04-29T11:19:26.096Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Wren-is-a-small-fast-class-based-concurrent-scripting-language"><a href="#Wren-is-a-small-fast-class-based-concurrent-scripting-language" class="headerlink" title="Wren is a small, fast, class-based concurrent scripting language."></a>Wren is a small, fast, class-based concurrent scripting language.</h3><h4 id="類"><a href="#類" class="headerlink" title="類"></a>類</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">class Unicorn &#123;</span><br><span class="line"> #hidden &#x3D; true &#x2F;&#x2F;屬性</span><br><span class="line"> isFancy &#123; true &#125; &#x2F;&#x2F;getter</span><br><span class="line"> rider&#x3D;(value) &#123; &#x2F;&#x2F;setter</span><br><span class="line">    System.print(&quot;I am being ridden by %(value).&quot;)</span><br><span class="line">  &#125;</span><br><span class="line">  - &#123; &#x2F;&#x2F;相反數</span><br><span class="line">    System.print(&quot;Negating a unicorn is weird.&quot;)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  -(other) &#123; &#x2F;&#x2F;減法</span><br><span class="line">    System.print(&quot;Subtracting %(other) from a unicorn is weird.&quot;)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  [index] &#123; &#x2F;&#x2F;索引</span><br><span class="line">    System.print(&quot;Unicorns are not lists!&quot;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  [x, y] &#123; &#x2F;&#x2F;二元索引</span><br><span class="line">    System.print(&quot;Unicorns are not matrices either!&quot;)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  [index]&#x3D;(value) &#123; &#x2F;&#x2F;索引setter</span><br><span class="line">    System.print(&quot;You can&#39;t stuff %(value) into me at %(index)!&quot;)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  prance() &#123;</span><br><span class="line">    System.print(&quot;The unicorn prances in a fancy manner!&quot;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  prance(where) &#123;</span><br><span class="line">    System.print(&quot;The unicorn prances in %(where).&quot;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  prance(where, when) &#123;</span><br><span class="line">    System.print(&quot;The unicorn prances in %(where) at %(when).&quot;)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  construct new(name, color) &#123; &#x2F;&#x2F;構造函數</span><br><span class="line">    System.print(&quot;My name is &quot; + name + &quot; and I am &quot; + color + &quot;.&quot;)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Pegasus is Unicorn &#123; &#x2F;&#x2F;繼承</span><br><span class="line">  construct new(name) &#123;</span><br><span class="line">    super(name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="協程"><a href="#協程" class="headerlink" title="協程"></a>協程</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var fiber &#x3D; Fiber.new &#123;|param|</span><br><span class="line">  System.print(param)</span><br><span class="line">  var result &#x3D; Fiber.yield()</span><br><span class="line">  System.print(result)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fiber.call(&quot;First&quot;) &#x2F;&#x2F;&gt; First</span><br><span class="line">fiber.call(&quot;Second&quot;) &#x2F;&#x2F;&gt; Second</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">My learning to wren language in Chinese part 2</summary>
    
    
    
    
    <category term="blog" scheme="https://cocosgames.com/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>Learning to wren 1</title>
    <link href="https://cocosgames.com/2021/04/27/wren1/"/>
    <id>https://cocosgames.com/2021/04/27/wren1/</id>
    <published>2021-04-27T08:13:52.324Z</published>
    <updated>2021-04-27T08:54:49.247Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Wren-is-a-small-fast-class-based-concurrent-scripting-language"><a href="#Wren-is-a-small-fast-class-based-concurrent-scripting-language" class="headerlink" title="Wren is a small, fast, class-based concurrent scripting language."></a>Wren is a small, fast, class-based concurrent scripting language.</h3><h4 id="注釋"><a href="#注釋" class="headerlink" title="注釋"></a>注釋</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; &#x2F;*  *&#x2F;</span><br></pre></td></tr></table></figure><h4 id="保留字"><a href="#保留字" class="headerlink" title="保留字"></a>保留字</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">as break class construct continue else false for foreign if import</span><br><span class="line">in is null return static super this true var while</span><br></pre></td></tr></table></figure><h4 id="控制臺輸出"><a href="#控制臺輸出" class="headerlink" title="控制臺輸出"></a>控制臺輸出</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.print(&quot;hi&quot;)</span><br></pre></td></tr></table></figure><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><h5 id="普通"><a href="#普通" class="headerlink" title="普通"></a>普通</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;test&quot;</span><br></pre></td></tr></table></figure><h5 id="强制"><a href="#强制" class="headerlink" title="强制"></a>强制</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">Hello world</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure><h4 id="範圍"><a href="#範圍" class="headerlink" title="範圍"></a>範圍</h4><h5 id="全包含"><a href="#全包含" class="headerlink" title="全包含"></a>全包含</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3..8</span><br></pre></td></tr></table></figure><h5 id="半包含"><a href="#半包含" class="headerlink" title="半包含"></a>半包含</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4...6</span><br></pre></td></tr></table></figure><h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var trees &#x3D; [&quot;cedar&quot;, &quot;birch&quot;, &quot;oak&quot;, &quot;willow&quot;]</span><br><span class="line">trees[0..-1]</span><br><span class="line">trees.count</span><br><span class="line">matrix[3, 5]</span><br></pre></td></tr></table></figure><h4 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;maple&quot;:  &quot;Sugar Maple (Acer Saccharum)&quot;,</span><br><span class="line">  &quot;larch&quot;:  &quot;Alpine Larch (Larix Lyallii)&quot;,</span><br><span class="line">  &quot;oak&quot;:    &quot;Red Oak (Quercus Rubra)&quot;,</span><br><span class="line">  &quot;fir&quot;:    &quot;Fraser Fir (Abies Fraseri)&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="循環"><a href="#循環" class="headerlink" title="循環"></a>循環</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for (i in 1..100) &#123;</span><br><span class="line">  System.print(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="函數"><a href="#函數" class="headerlink" title="函數"></a>函數</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var sayHello &#x3D; Fn.new &#123; System.print(&quot;hello&quot;) &#125;</span><br><span class="line">sayHello.call() &#x2F;&#x2F;&gt; hello</span><br><span class="line">link.onClick &#123;|button|</span><br><span class="line">  System.print(&quot;I was clicked by button %(button)&quot;)</span><br><span class="line">&#125;</span><br><span class="line">var onEvent &#x3D; Fn.new &#123;|button|</span><br><span class="line">  System.print(&quot;clicked by button %(button)&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="過濾"><a href="#過濾" class="headerlink" title="過濾"></a>過濾</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var filtered &#x3D; list.where &#123;|value| value &gt; 3 &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">My learning to wren language in Chinese part 1</summary>
    
    
    
    
    <category term="blog" scheme="https://cocosgames.com/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>Misunderstanding About Chinese TaiChi</title>
    <link href="https://cocosgames.com/2021/04/12/taichi/"/>
    <id>https://cocosgames.com/2021/04/12/taichi/</id>
    <published>2021-04-12T06:38:57.524Z</published>
    <updated>2021-04-15T07:38:53.653Z</updated>
    
    <content type="html"><![CDATA[<p>Because I am a Chinese, I know China very well.<br>Today I want to talk about Chinese Taijiquan(TaiChi). People from other countries, even the Chinese themselves, have completely deviated from the right track of TaiChi. This make scammers opportunities to conduct fraudulent activities.<br>So I want to correct these prejudices and prevent good people from being deceived. TaiChi is an ancient Chinese martial technique and also an art. Its function is to subdue opponents in confrontation (not killing them).<br>There are no other profound meanings, the harmony of the universe, the flow of energy, they are all made up by some people for hype.</p><h3 id="TaiChi-Moves-Slowly"><a href="#TaiChi-Moves-Slowly" class="headerlink" title="TaiChi Moves Slowly"></a>TaiChi Moves Slowly</h3><p>There is a reason. A real TaiChi boxer exercises a lot every day. But in ancient times you could not just find someone to beat, so most boxers practice alone.<br>No matter how strong you are, punches to the air, no force point, can hurt you. The longer you exercise, the greater the damage you will suffer.<br>Therefore, smart boxers will not use their 100% force to beat the air, but they will be gentle. Yes, practice the movements slowly.<br>The purpose is to strengthen the memory of the movements, not to train their own strength. But some people find that TaiChi movements are so slow, which is very suitable for old people who not able to do a lot of exercise.<br>But at this time that is not TaiChi, it’s just movement exercises for old people.</p><h3 id="TaiChi-can-harmonize-yin-and-yang-and-harmonize-the-universe"><a href="#TaiChi-can-harmonize-yin-and-yang-and-harmonize-the-universe" class="headerlink" title="TaiChi can harmonize yin and yang and harmonize the universe"></a>TaiChi can harmonize yin and yang and harmonize the universe</h3><p>Don’t believe the rhetoric fabricated by swindlers, they just want to make money.</p><h3 id="TaiChi-Trying-Avoid-Frontal-Confrontation"><a href="#TaiChi-Trying-Avoid-Frontal-Confrontation" class="headerlink" title="TaiChi Trying Avoid Frontal Confrontation"></a>TaiChi Trying Avoid Frontal Confrontation</h3><p>  <img src="/assets/taichi/quanji.jpg" alt="Boxing" title="Boxing"><br>  <img src="/assets/taichi/baiheliangchi.jpg" alt="TaiChi" title="TaiChi"></p><p>Boxing includes offense and defense. When defending, boxers use thick boxing gloves to cover the face. But TaiChi boxers don’t have gloves. Boxers want to avoid any punch.<br>They open their arms and open the their front side so they can quickly apply lateral force when opponents attacking. Instead of using the body to resist the impact.<br>In other words, this is the wisdom and superb technique of the ancients. Now I can not see any self-proclaimed master who got this technique.</p>]]></content>
    
    
    <summary type="html">I want to explain the misunderstanding about Chinese TaiChi☯.</summary>
    
    
    
    
    <category term="blog" scheme="https://cocosgames.com/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>Coco&#39;s Games on line</title>
    <link href="https://cocosgames.com/2020/12/26/online/"/>
    <id>https://cocosgames.com/2020/12/26/online/</id>
    <published>2020-12-26T07:06:28.804Z</published>
    <updated>2021-08-19T10:52:52.600Z</updated>
    
    <content type="html"><![CDATA[<p>Hi, my name is Coco. Welcome to my personal site. this is my first post. I’d like to share my opinion about what is a game.</p><blockquote><p>  <strong>A game is to tell, a game is to get.</strong><br>  <strong>A game is to think, a game is to learn.</strong><br>  <strong>A game is to encourage, a game is to try.</strong><br>  <strong>A game is to laugh, a game is to cry.</strong></p><hr><p>  <strong>So that, a game is to bring us a better life.</strong></p></blockquote><p>Thank you so much for reading it.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Hi, my name is Coco. Welcome to my personal site. this is my first post. I’d like to share my opinion about what is a game.&lt;/p&gt;
&lt;blockquo</summary>
      
    
    
    
    
    <category term="blog" scheme="https://cocosgames.com/tags/blog/"/>
    
  </entry>
  
</feed>
